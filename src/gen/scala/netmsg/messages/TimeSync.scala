// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.messages


import com.trueaccord.scalapb.Descriptors

final case class TimeSync(
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TimeSync] with com.trueaccord.lenses.Updatable[TimeSync] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.messages.TimeSync = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag => __input.skipField(tag)
        }
      }
      netmsg.messages.TimeSync(
      )
    }
    def getField(__field: Descriptors.FieldDescriptor): Any = throw new MatchError(__field)
    def companion = netmsg.messages.TimeSync
}

object TimeSync extends com.trueaccord.scalapb.GeneratedMessageCompanion[TimeSync]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[TimeSync]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.messages.TimeSync = netmsg.messages.TimeSync(
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("TimeSync", this,
    None, m = Seq(netmsg.messages.TimeSync.FromClient.descriptor, netmsg.messages.TimeSync.FromServer.descriptor),
    e = Seq(),
    f = netmsg.messages.InternalFields_messages.internalFieldsFor("netmsg.messages.TimeSync"))
  lazy val defaultInstance = netmsg.messages.TimeSync(
  )
  final case class FromClient(
      now: netmsg.base.Timestamp
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FromClient] with com.trueaccord.lenses.Updatable[FromClient] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(now.serializedSize) + now.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(now.serializedSize)
        now.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.messages.TimeSync.FromClient = {
        var __now = this.now
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __now = com.trueaccord.scalapb.LiteParser.readMessage(__input, __now)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.messages.TimeSync.FromClient(
            now = __now
        )
      }
      def withNow(__v: netmsg.base.Timestamp): FromClient = copy(now = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => now
        }
      }
      def companion = netmsg.messages.TimeSync.FromClient
  }
  
  object FromClient extends com.trueaccord.scalapb.GeneratedMessageCompanion[FromClient]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[FromClient]  = this
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.messages.TimeSync.FromClient = netmsg.messages.TimeSync.FromClient(
      now = fieldsMap(1).asInstanceOf[netmsg.base.Timestamp]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("FromClient", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.messages.InternalFields_messages.internalFieldsFor("netmsg.messages.TimeSync.FromClient"))
    lazy val defaultInstance = netmsg.messages.TimeSync.FromClient(
      now = netmsg.base.Timestamp.defaultInstance
    )
    implicit class FromClientLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, FromClient]) extends com.trueaccord.lenses.ObjectLens[UpperPB, FromClient](_l) {
      def now: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Timestamp] = field(_.now)((c_, f_) => c_.copy(now = f_))
    }
    final val NOW_FIELD_NUMBER = 1
  }
  
  final case class FromServer(
      clientNow: netmsg.base.Timestamp,
      serverNow: netmsg.base.Timestamp
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FromServer] with com.trueaccord.lenses.Updatable[FromServer] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(clientNow.serializedSize) + clientNow.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(serverNow.serializedSize) + serverNow.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(clientNow.serializedSize)
        clientNow.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(serverNow.serializedSize)
        serverNow.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.messages.TimeSync.FromServer = {
        var __clientNow = this.clientNow
        var __serverNow = this.serverNow
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __clientNow = com.trueaccord.scalapb.LiteParser.readMessage(__input, __clientNow)
            case 18 =>
              __serverNow = com.trueaccord.scalapb.LiteParser.readMessage(__input, __serverNow)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.messages.TimeSync.FromServer(
            clientNow = __clientNow,
            serverNow = __serverNow
        )
      }
      def withClientNow(__v: netmsg.base.Timestamp): FromServer = copy(clientNow = __v)
      def withServerNow(__v: netmsg.base.Timestamp): FromServer = copy(serverNow = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => clientNow
          case 2 => serverNow
        }
      }
      def companion = netmsg.messages.TimeSync.FromServer
  }
  
  object FromServer extends com.trueaccord.scalapb.GeneratedMessageCompanion[FromServer]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[FromServer]  = this
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.messages.TimeSync.FromServer = netmsg.messages.TimeSync.FromServer(
      clientNow = fieldsMap(1).asInstanceOf[netmsg.base.Timestamp],
      serverNow = fieldsMap(2).asInstanceOf[netmsg.base.Timestamp]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("FromServer", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.messages.InternalFields_messages.internalFieldsFor("netmsg.messages.TimeSync.FromServer"))
    lazy val defaultInstance = netmsg.messages.TimeSync.FromServer(
      clientNow = netmsg.base.Timestamp.defaultInstance,
      serverNow = netmsg.base.Timestamp.defaultInstance
    )
    implicit class FromServerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, FromServer]) extends com.trueaccord.lenses.ObjectLens[UpperPB, FromServer](_l) {
      def clientNow: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Timestamp] = field(_.clientNow)((c_, f_) => c_.copy(clientNow = f_))
      def serverNow: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Timestamp] = field(_.serverNow)((c_, f_) => c_.copy(serverNow = f_))
    }
    final val CLIENT_NOW_FIELD_NUMBER = 1
    final val SERVER_NOW_FIELD_NUMBER = 2
  }
  
  implicit class TimeSyncLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, TimeSync]) extends com.trueaccord.lenses.ObjectLens[UpperPB, TimeSync](_l) {
  }
}
