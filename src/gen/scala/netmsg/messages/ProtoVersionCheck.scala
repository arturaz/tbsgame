// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.messages


import com.trueaccord.scalapb.Descriptors

final case class ProtoVersionCheck(
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ProtoVersionCheck] with com.trueaccord.lenses.Updatable[ProtoVersionCheck] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.messages.ProtoVersionCheck = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag => __input.skipField(tag)
        }
      }
      netmsg.messages.ProtoVersionCheck(
      )
    }
    def getField(__field: Descriptors.FieldDescriptor): Any = throw new MatchError(__field)
    def companion = netmsg.messages.ProtoVersionCheck
}

object ProtoVersionCheck extends com.trueaccord.scalapb.GeneratedMessageCompanion[ProtoVersionCheck]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ProtoVersionCheck]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.messages.ProtoVersionCheck = netmsg.messages.ProtoVersionCheck(
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("ProtoVersionCheck", this,
    None, m = Seq(netmsg.messages.ProtoVersionCheck.FromClient.descriptor, netmsg.messages.ProtoVersionCheck.FromServer.descriptor),
    e = Seq(),
    f = netmsg.messages.InternalFields_messages.internalFieldsFor("netmsg.messages.ProtoVersionCheck"))
  lazy val defaultInstance = netmsg.messages.ProtoVersionCheck(
  )
  final case class FromClient(
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FromClient] with com.trueaccord.lenses.Updatable[FromClient] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.messages.ProtoVersionCheck.FromClient = {
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case tag => __input.skipField(tag)
          }
        }
        netmsg.messages.ProtoVersionCheck.FromClient(
        )
      }
      def getField(__field: Descriptors.FieldDescriptor): Any = throw new MatchError(__field)
      def companion = netmsg.messages.ProtoVersionCheck.FromClient
  }
  
  object FromClient extends com.trueaccord.scalapb.GeneratedMessageCompanion[FromClient]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[FromClient]  = this
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.messages.ProtoVersionCheck.FromClient = netmsg.messages.ProtoVersionCheck.FromClient(
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("FromClient", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.messages.InternalFields_messages.internalFieldsFor("netmsg.messages.ProtoVersionCheck.FromClient"))
    lazy val defaultInstance = netmsg.messages.ProtoVersionCheck.FromClient(
    )
    implicit class FromClientLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, FromClient]) extends com.trueaccord.lenses.ObjectLens[UpperPB, FromClient](_l) {
    }
  }
  
  final case class FromServer(
      checksum: String
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FromServer] with com.trueaccord.lenses.Updatable[FromServer] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, checksum)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeString(1, checksum)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.messages.ProtoVersionCheck.FromServer = {
        var __checksum = this.checksum
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __checksum = __input.readString()
            case tag => __input.skipField(tag)
          }
        }
        netmsg.messages.ProtoVersionCheck.FromServer(
            checksum = __checksum
        )
      }
      def withChecksum(__v: String): FromServer = copy(checksum = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => checksum
        }
      }
      def companion = netmsg.messages.ProtoVersionCheck.FromServer
  }
  
  object FromServer extends com.trueaccord.scalapb.GeneratedMessageCompanion[FromServer]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[FromServer]  = this
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.messages.ProtoVersionCheck.FromServer = netmsg.messages.ProtoVersionCheck.FromServer(
      checksum = fieldsMap(1).asInstanceOf[String]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("FromServer", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.messages.InternalFields_messages.internalFieldsFor("netmsg.messages.ProtoVersionCheck.FromServer"))
    lazy val defaultInstance = netmsg.messages.ProtoVersionCheck.FromServer(
      checksum = ""
    )
    implicit class FromServerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, FromServer]) extends com.trueaccord.lenses.ObjectLens[UpperPB, FromServer](_l) {
      def checksum: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.checksum)((c_, f_) => c_.copy(checksum = f_))
    }
    final val CHECKSUM_FIELD_NUMBER = 1
  }
  
  implicit class ProtoVersionCheckLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ProtoVersionCheck]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ProtoVersionCheck](_l) {
  }
}
