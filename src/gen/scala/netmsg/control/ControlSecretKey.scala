// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.control


import com.trueaccord.scalapb.Descriptors

final case class ControlSecretKey(
    key: String
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ControlSecretKey] with com.trueaccord.lenses.Updatable[ControlSecretKey] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, key)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeString(1, key)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.control.ControlSecretKey = {
      var __key = this.key
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.control.ControlSecretKey(
          key = __key
      )
    }
    def withKey(__v: String): ControlSecretKey = copy(key = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => key
      }
    }
    def companion = netmsg.control.ControlSecretKey
}

object ControlSecretKey extends com.trueaccord.scalapb.GeneratedMessageCompanion[ControlSecretKey]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ControlSecretKey]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.control.ControlSecretKey = netmsg.control.ControlSecretKey(
    key = fieldsMap(1).asInstanceOf[String]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("ControlSecretKey", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.control.InternalFields_control.internalFieldsFor("netmsg.control.ControlSecretKey"))
  lazy val defaultInstance = netmsg.control.ControlSecretKey(
    key = ""
  )
  implicit class ControlSecretKeyLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ControlSecretKey]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ControlSecretKey](_l) {
    def key: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
  }
  final val KEY_FIELD_NUMBER = 1
}
