// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.control


import com.trueaccord.scalapb.Descriptors

final case class Client2Server(
    secretKey: netmsg.control.ControlSecretKey,
    shutdown: Option[netmsg.control.ShutdownReq] = None,
    status: Option[netmsg.control.StatusReq] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Client2Server] with com.trueaccord.lenses.Updatable[Client2Server] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(secretKey.serializedSize) + secretKey.serializedSize
      if (shutdown.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(shutdown.get.serializedSize) + shutdown.get.serializedSize }
      if (status.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(status.get.serializedSize) + status.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(secretKey.serializedSize)
      secretKey.writeTo(output)
      shutdown.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      status.foreach { v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.control.Client2Server = {
      var __secretKey = this.secretKey
      var __shutdown = this.shutdown
      var __status = this.status
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __secretKey = com.trueaccord.scalapb.LiteParser.readMessage(__input, __secretKey)
          case 18 =>
            __shutdown = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __shutdown.getOrElse(netmsg.control.ShutdownReq.defaultInstance)))
          case 26 =>
            __status = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __status.getOrElse(netmsg.control.StatusReq.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      netmsg.control.Client2Server(
          secretKey = __secretKey,
          shutdown = __shutdown,
          status = __status
      )
    }
    def withSecretKey(__v: netmsg.control.ControlSecretKey): Client2Server = copy(secretKey = __v)
    def getShutdown: netmsg.control.ShutdownReq = shutdown.getOrElse(netmsg.control.ShutdownReq.defaultInstance)
    def clearShutdown: Client2Server = copy(shutdown = None)
    def withShutdown(__v: netmsg.control.ShutdownReq): Client2Server = copy(shutdown = Some(__v))
    def getStatus: netmsg.control.StatusReq = status.getOrElse(netmsg.control.StatusReq.defaultInstance)
    def clearStatus: Client2Server = copy(status = None)
    def withStatus(__v: netmsg.control.StatusReq): Client2Server = copy(status = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => secretKey
        case 2 => shutdown
        case 3 => status
      }
    }
    def companion = netmsg.control.Client2Server
}

object Client2Server extends com.trueaccord.scalapb.GeneratedMessageCompanion[Client2Server]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Client2Server]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.control.Client2Server = netmsg.control.Client2Server(
    secretKey = fieldsMap(1).asInstanceOf[netmsg.control.ControlSecretKey],
    shutdown = fieldsMap.getOrElse(2, None).asInstanceOf[Option[netmsg.control.ShutdownReq]],
    status = fieldsMap.getOrElse(3, None).asInstanceOf[Option[netmsg.control.StatusReq]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Client2Server", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.control.InternalFields_control.internalFieldsFor("netmsg.control.Client2Server"))
  lazy val defaultInstance = netmsg.control.Client2Server(
    secretKey = netmsg.control.ControlSecretKey.defaultInstance
  )
  implicit class Client2ServerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Client2Server]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Client2Server](_l) {
    def secretKey: com.trueaccord.lenses.Lens[UpperPB, netmsg.control.ControlSecretKey] = field(_.secretKey)((c_, f_) => c_.copy(secretKey = f_))
    def shutdown: com.trueaccord.lenses.Lens[UpperPB, netmsg.control.ShutdownReq] = field(_.getShutdown)((c_, f_) => c_.copy(shutdown = Some(f_)))
    def optionalShutdown: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.control.ShutdownReq]] = field(_.shutdown)((c_, f_) => c_.copy(shutdown = f_))
    def status: com.trueaccord.lenses.Lens[UpperPB, netmsg.control.StatusReq] = field(_.getStatus)((c_, f_) => c_.copy(status = Some(f_)))
    def optionalStatus: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.control.StatusReq]] = field(_.status)((c_, f_) => c_.copy(status = f_))
  }
  final val SECRET_KEY_FIELD_NUMBER = 1
  final val SHUTDOWN_FIELD_NUMBER = 2
  final val STATUS_FIELD_NUMBER = 3
}
