// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.control


import com.trueaccord.scalapb.Descriptors

final case class GenericReply(
    success: Boolean,
    message: Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GenericReply] with com.trueaccord.lenses.Updatable[GenericReply] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeBoolSize(1, success)
      if (message.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, message.get) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeBool(1, success)
      message.foreach { v => 
        output.writeString(2, v)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.control.GenericReply = {
      var __success = this.success
      var __message = this.message
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __success = __input.readBool()
          case 18 =>
            __message = Some(__input.readString())
          case tag => __input.skipField(tag)
        }
      }
      netmsg.control.GenericReply(
          success = __success,
          message = __message
      )
    }
    def withSuccess(__v: Boolean): GenericReply = copy(success = __v)
    def getMessage: String = message.getOrElse("")
    def clearMessage: GenericReply = copy(message = None)
    def withMessage(__v: String): GenericReply = copy(message = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => success
        case 2 => message
      }
    }
    def companion = netmsg.control.GenericReply
}

object GenericReply extends com.trueaccord.scalapb.GeneratedMessageCompanion[GenericReply]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[GenericReply]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.control.GenericReply = netmsg.control.GenericReply(
    success = fieldsMap(1).asInstanceOf[Boolean],
    message = fieldsMap.getOrElse(2, None).asInstanceOf[Option[String]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("GenericReply", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.control.InternalFields_control.internalFieldsFor("netmsg.control.GenericReply"))
  lazy val defaultInstance = netmsg.control.GenericReply(
    success = false
  )
  implicit class GenericReplyLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, GenericReply]) extends com.trueaccord.lenses.ObjectLens[UpperPB, GenericReply](_l) {
    def success: com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.success)((c_, f_) => c_.copy(success = f_))
    def message: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getMessage)((c_, f_) => c_.copy(message = Some(f_)))
    def optionalMessage: com.trueaccord.lenses.Lens[UpperPB, Option[String]] = field(_.message)((c_, f_) => c_.copy(message = f_))
  }
  final val SUCCESS_FIELD_NUMBER = 1
  final val MESSAGE_FIELD_NUMBER = 2
}
