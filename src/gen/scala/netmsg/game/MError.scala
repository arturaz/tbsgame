// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class MError(
    error: String
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MError] with com.trueaccord.lenses.Updatable[MError] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, error)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeString(1, error)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.MError = {
      var __error = this.error
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __error = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.MError(
          error = __error
      )
    }
    def withError(__v: String): MError = copy(error = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => error
      }
    }
    def companion = netmsg.game.MError
}

object MError extends com.trueaccord.scalapb.GeneratedMessageCompanion[MError]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[MError]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.MError = netmsg.game.MError(
    error = fieldsMap(1).asInstanceOf[String]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("MError", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.MError"))
  lazy val defaultInstance = netmsg.game.MError(
    error = ""
  )
  implicit class MErrorLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, MError]) extends com.trueaccord.lenses.ObjectLens[UpperPB, MError](_l) {
    def error: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.error)((c_, f_) => c_.copy(error = f_))
  }
  final val ERROR_FIELD_NUMBER = 1
}
