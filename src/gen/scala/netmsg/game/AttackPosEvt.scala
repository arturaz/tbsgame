// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class AttackPosEvt(
    attackerId: netmsg.game.WObjID,
    targetPos: netmsg.base.Vect2
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AttackPosEvt] with com.trueaccord.lenses.Updatable[AttackPosEvt] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(attackerId.serializedSize) + attackerId.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(targetPos.serializedSize) + targetPos.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(attackerId.serializedSize)
      attackerId.writeTo(output)
      output.writeTag(2, 2)
      output.writeRawVarint32(targetPos.serializedSize)
      targetPos.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.AttackPosEvt = {
      var __attackerId = this.attackerId
      var __targetPos = this.targetPos
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __attackerId = com.trueaccord.scalapb.LiteParser.readMessage(__input, __attackerId)
          case 18 =>
            __targetPos = com.trueaccord.scalapb.LiteParser.readMessage(__input, __targetPos)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.AttackPosEvt(
          attackerId = __attackerId,
          targetPos = __targetPos
      )
    }
    def withAttackerId(__v: netmsg.game.WObjID): AttackPosEvt = copy(attackerId = __v)
    def withTargetPos(__v: netmsg.base.Vect2): AttackPosEvt = copy(targetPos = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => attackerId
        case 2 => targetPos
      }
    }
    def companion = netmsg.game.AttackPosEvt
}

object AttackPosEvt extends com.trueaccord.scalapb.GeneratedMessageCompanion[AttackPosEvt]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[AttackPosEvt]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.AttackPosEvt = netmsg.game.AttackPosEvt(
    attackerId = fieldsMap(1).asInstanceOf[netmsg.game.WObjID],
    targetPos = fieldsMap(2).asInstanceOf[netmsg.base.Vect2]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("AttackPosEvt", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.AttackPosEvt"))
  lazy val defaultInstance = netmsg.game.AttackPosEvt(
    attackerId = netmsg.game.WObjID.defaultInstance,
    targetPos = netmsg.base.Vect2.defaultInstance
  )
  implicit class AttackPosEvtLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, AttackPosEvt]) extends com.trueaccord.lenses.ObjectLens[UpperPB, AttackPosEvt](_l) {
    def attackerId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjID] = field(_.attackerId)((c_, f_) => c_.copy(attackerId = f_))
    def targetPos: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Vect2] = field(_.targetPos)((c_, f_) => c_.copy(targetPos = f_))
  }
  final val ATTACKER_ID_FIELD_NUMBER = 1
  final val TARGET_POS_FIELD_NUMBER = 2
}
