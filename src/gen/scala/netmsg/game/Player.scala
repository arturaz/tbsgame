// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class Player(
    name: String,
    id: netmsg.game.PlayerID,
    teamId: netmsg.game.TeamID
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Player] with com.trueaccord.lenses.Updatable[Player] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(id.serializedSize) + id.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(teamId.serializedSize) + teamId.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeString(1, name)
      output.writeTag(2, 2)
      output.writeRawVarint32(id.serializedSize)
      id.writeTo(output)
      output.writeTag(3, 2)
      output.writeRawVarint32(teamId.serializedSize)
      teamId.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.Player = {
      var __name = this.name
      var __id = this.id
      var __teamId = this.teamId
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = __input.readString()
          case 18 =>
            __id = com.trueaccord.scalapb.LiteParser.readMessage(__input, __id)
          case 26 =>
            __teamId = com.trueaccord.scalapb.LiteParser.readMessage(__input, __teamId)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.Player(
          name = __name,
          id = __id,
          teamId = __teamId
      )
    }
    def withName(__v: String): Player = copy(name = __v)
    def withId(__v: netmsg.game.PlayerID): Player = copy(id = __v)
    def withTeamId(__v: netmsg.game.TeamID): Player = copy(teamId = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => name
        case 2 => id
        case 3 => teamId
      }
    }
    def companion = netmsg.game.Player
}

object Player extends com.trueaccord.scalapb.GeneratedMessageCompanion[Player]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Player]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.Player = netmsg.game.Player(
    name = fieldsMap(1).asInstanceOf[String],
    id = fieldsMap(2).asInstanceOf[netmsg.game.PlayerID],
    teamId = fieldsMap(3).asInstanceOf[netmsg.game.TeamID]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Player", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.Player"))
  lazy val defaultInstance = netmsg.game.Player(
    name = "",
    id = netmsg.game.PlayerID.defaultInstance,
    teamId = netmsg.game.TeamID.defaultInstance
  )
  implicit class PlayerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Player]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Player](_l) {
    def name: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def id: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.PlayerID] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def teamId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.TeamID] = field(_.teamId)((c_, f_) => c_.copy(teamId = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val TEAM_ID_FIELD_NUMBER = 3
}
