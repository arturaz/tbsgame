// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class InitPlayer(
    player: netmsg.game.Player,
    state: Option[netmsg.game.PlayerState] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[InitPlayer] with com.trueaccord.lenses.Updatable[InitPlayer] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(player.serializedSize) + player.serializedSize
      if (state.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(state.get.serializedSize) + state.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(player.serializedSize)
      player.writeTo(output)
      state.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.InitPlayer = {
      var __player = this.player
      var __state = this.state
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __player = com.trueaccord.scalapb.LiteParser.readMessage(__input, __player)
          case 18 =>
            __state = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __state.getOrElse(netmsg.game.PlayerState.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.InitPlayer(
          player = __player,
          state = __state
      )
    }
    def withPlayer(__v: netmsg.game.Player): InitPlayer = copy(player = __v)
    def getState: netmsg.game.PlayerState = state.getOrElse(netmsg.game.PlayerState.defaultInstance)
    def clearState: InitPlayer = copy(state = None)
    def withState(__v: netmsg.game.PlayerState): InitPlayer = copy(state = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => player
        case 2 => state
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.InitPlayer.toJavaProto(this))
    def companion = netmsg.game.InitPlayer
}

object InitPlayer extends com.trueaccord.scalapb.GeneratedMessageCompanion[InitPlayer] with com.trueaccord.scalapb.JavaProtoSupport[InitPlayer, netmsg.Game.InitPlayer]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[InitPlayer] with com.trueaccord.scalapb.JavaProtoSupport[InitPlayer, netmsg.Game.InitPlayer]  = this
  def toJavaProto(scalaPbSource: netmsg.game.InitPlayer): netmsg.Game.InitPlayer = {
    val javaPbOut = netmsg.Game.InitPlayer.newBuilder
    javaPbOut.setPlayer(netmsg.game.Player.toJavaProto(scalaPbSource.player))
    scalaPbSource.state.map(netmsg.game.PlayerState.toJavaProto).foreach(javaPbOut.setState)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Game.InitPlayer): netmsg.game.InitPlayer = netmsg.game.InitPlayer(
    player = netmsg.game.Player.fromJavaProto(javaPbSource.getPlayer),
    state = if (javaPbSource.hasState) Some(netmsg.game.PlayerState.fromJavaProto(javaPbSource.getState)) else None
  )
  override def fromAscii(ascii: String): netmsg.game.InitPlayer = {
    val javaProtoBuilder = netmsg.Game.InitPlayer.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.InitPlayer = netmsg.game.InitPlayer(
    player = fieldsMap(1).asInstanceOf[netmsg.game.Player],
    state = fieldsMap.getOrElse(2, None).asInstanceOf[Option[netmsg.game.PlayerState]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("InitPlayer", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.InitPlayer"))
  lazy val defaultInstance = netmsg.game.InitPlayer(
    player = netmsg.game.Player.defaultInstance
  )
  implicit class InitPlayerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, InitPlayer]) extends com.trueaccord.lenses.ObjectLens[UpperPB, InitPlayer](_l) {
    def player: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.Player] = field(_.player)((c_, f_) => c_.copy(player = f_))
    def state: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.PlayerState] = field(_.getState)((c_, f_) => c_.copy(state = Some(f_)))
    def optionalState: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.PlayerState]] = field(_.state)((c_, f_) => c_.copy(state = f_))
  }
  final val PLAYER_FIELD_NUMBER = 1
  final val STATE_FIELD_NUMBER = 2
}
