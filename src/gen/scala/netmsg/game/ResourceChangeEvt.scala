// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class ResourceChangeEvt(
    objId: Option[netmsg.game.WObjID] = None,
    playerId: Option[netmsg.game.PlayerID] = None,
    newResources: Int
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ResourceChangeEvt] with com.trueaccord.lenses.Updatable[ResourceChangeEvt] {
    lazy val serializedSize: Int = {
      var __size = 0
      if (objId.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(objId.get.serializedSize) + objId.get.serializedSize }
      if (playerId.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(playerId.get.serializedSize) + playerId.get.serializedSize }
      __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(3, newResources)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      objId.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      playerId.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      output.writeUInt32(3, newResources)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.ResourceChangeEvt = {
      var __objId = this.objId
      var __playerId = this.playerId
      var __newResources = this.newResources
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __objId = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __objId.getOrElse(netmsg.game.WObjID.defaultInstance)))
          case 18 =>
            __playerId = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __playerId.getOrElse(netmsg.game.PlayerID.defaultInstance)))
          case 24 =>
            __newResources = __input.readUInt32()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.ResourceChangeEvt(
          objId = __objId,
          playerId = __playerId,
          newResources = __newResources
      )
    }
    def getObjId: netmsg.game.WObjID = objId.getOrElse(netmsg.game.WObjID.defaultInstance)
    def clearObjId: ResourceChangeEvt = copy(objId = None)
    def withObjId(__v: netmsg.game.WObjID): ResourceChangeEvt = copy(objId = Some(__v))
    def getPlayerId: netmsg.game.PlayerID = playerId.getOrElse(netmsg.game.PlayerID.defaultInstance)
    def clearPlayerId: ResourceChangeEvt = copy(playerId = None)
    def withPlayerId(__v: netmsg.game.PlayerID): ResourceChangeEvt = copy(playerId = Some(__v))
    def withNewResources(__v: Int): ResourceChangeEvt = copy(newResources = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => objId
        case 2 => playerId
        case 3 => newResources
      }
    }
    def companion = netmsg.game.ResourceChangeEvt
}

object ResourceChangeEvt extends com.trueaccord.scalapb.GeneratedMessageCompanion[ResourceChangeEvt]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ResourceChangeEvt]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.ResourceChangeEvt = netmsg.game.ResourceChangeEvt(
    objId = fieldsMap.getOrElse(1, None).asInstanceOf[Option[netmsg.game.WObjID]],
    playerId = fieldsMap.getOrElse(2, None).asInstanceOf[Option[netmsg.game.PlayerID]],
    newResources = fieldsMap(3).asInstanceOf[Int]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("ResourceChangeEvt", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.ResourceChangeEvt"))
  lazy val defaultInstance = netmsg.game.ResourceChangeEvt(
    newResources = 0
  )
  implicit class ResourceChangeEvtLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ResourceChangeEvt]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ResourceChangeEvt](_l) {
    def objId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjID] = field(_.getObjId)((c_, f_) => c_.copy(objId = Some(f_)))
    def optionalObjId: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObjID]] = field(_.objId)((c_, f_) => c_.copy(objId = f_))
    def playerId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.PlayerID] = field(_.getPlayerId)((c_, f_) => c_.copy(playerId = Some(f_)))
    def optionalPlayerId: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.PlayerID]] = field(_.playerId)((c_, f_) => c_.copy(playerId = f_))
    def newResources: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.newResources)((c_, f_) => c_.copy(newResources = f_))
  }
  final val OBJ_ID_FIELD_NUMBER = 1
  final val PLAYER_ID_FIELD_NUMBER = 2
  final val NEW_RESOURCES_FIELD_NUMBER = 3
}
