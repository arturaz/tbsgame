// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class OwnerID(
    teamId: Option[netmsg.game.TeamID] = None,
    playerId: Option[netmsg.game.PlayerID] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OwnerID] with com.trueaccord.lenses.Updatable[OwnerID] {
    lazy val serializedSize: Int = {
      var __size = 0
      if (teamId.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(teamId.get.serializedSize) + teamId.get.serializedSize }
      if (playerId.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(playerId.get.serializedSize) + playerId.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      teamId.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      playerId.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.OwnerID = {
      var __teamId = this.teamId
      var __playerId = this.playerId
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __teamId = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __teamId.getOrElse(netmsg.game.TeamID.defaultInstance)))
          case 18 =>
            __playerId = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __playerId.getOrElse(netmsg.game.PlayerID.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.OwnerID(
          teamId = __teamId,
          playerId = __playerId
      )
    }
    def getTeamId: netmsg.game.TeamID = teamId.getOrElse(netmsg.game.TeamID.defaultInstance)
    def clearTeamId: OwnerID = copy(teamId = None)
    def withTeamId(__v: netmsg.game.TeamID): OwnerID = copy(teamId = Some(__v))
    def getPlayerId: netmsg.game.PlayerID = playerId.getOrElse(netmsg.game.PlayerID.defaultInstance)
    def clearPlayerId: OwnerID = copy(playerId = None)
    def withPlayerId(__v: netmsg.game.PlayerID): OwnerID = copy(playerId = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => teamId
        case 2 => playerId
      }
    }
    def companion = netmsg.game.OwnerID
}

object OwnerID extends com.trueaccord.scalapb.GeneratedMessageCompanion[OwnerID]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[OwnerID]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.OwnerID = netmsg.game.OwnerID(
    teamId = fieldsMap.getOrElse(1, None).asInstanceOf[Option[netmsg.game.TeamID]],
    playerId = fieldsMap.getOrElse(2, None).asInstanceOf[Option[netmsg.game.PlayerID]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("OwnerID", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.OwnerID"))
  lazy val defaultInstance = netmsg.game.OwnerID(
  )
  implicit class OwnerIDLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, OwnerID]) extends com.trueaccord.lenses.ObjectLens[UpperPB, OwnerID](_l) {
    def teamId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.TeamID] = field(_.getTeamId)((c_, f_) => c_.copy(teamId = Some(f_)))
    def optionalTeamId: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.TeamID]] = field(_.teamId)((c_, f_) => c_.copy(teamId = f_))
    def playerId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.PlayerID] = field(_.getPlayerId)((c_, f_) => c_.copy(playerId = Some(f_)))
    def optionalPlayerId: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.PlayerID]] = field(_.playerId)((c_, f_) => c_.copy(playerId = f_))
  }
  final val TEAM_ID_FIELD_NUMBER = 1
  final val PLAYER_ID_FIELD_NUMBER = 2
}
