// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class AttackEvt(
    attackerId: netmsg.game.WObjID,
    defenderId: netmsg.game.WObjID,
    hpLeft: Int,
    attack: netmsg.game.Attack
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AttackEvt] with com.trueaccord.lenses.Updatable[AttackEvt] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(attackerId.serializedSize) + attackerId.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(defenderId.serializedSize) + defenderId.serializedSize
      __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(3, hpLeft)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(attack.serializedSize) + attack.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(attackerId.serializedSize)
      attackerId.writeTo(output)
      output.writeTag(2, 2)
      output.writeRawVarint32(defenderId.serializedSize)
      defenderId.writeTo(output)
      output.writeUInt32(3, hpLeft)
      output.writeTag(4, 2)
      output.writeRawVarint32(attack.serializedSize)
      attack.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.AttackEvt = {
      var __attackerId = this.attackerId
      var __defenderId = this.defenderId
      var __hpLeft = this.hpLeft
      var __attack = this.attack
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __attackerId = com.trueaccord.scalapb.LiteParser.readMessage(__input, __attackerId)
          case 18 =>
            __defenderId = com.trueaccord.scalapb.LiteParser.readMessage(__input, __defenderId)
          case 24 =>
            __hpLeft = __input.readUInt32()
          case 34 =>
            __attack = com.trueaccord.scalapb.LiteParser.readMessage(__input, __attack)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.AttackEvt(
          attackerId = __attackerId,
          defenderId = __defenderId,
          hpLeft = __hpLeft,
          attack = __attack
      )
    }
    def withAttackerId(__v: netmsg.game.WObjID): AttackEvt = copy(attackerId = __v)
    def withDefenderId(__v: netmsg.game.WObjID): AttackEvt = copy(defenderId = __v)
    def withHpLeft(__v: Int): AttackEvt = copy(hpLeft = __v)
    def withAttack(__v: netmsg.game.Attack): AttackEvt = copy(attack = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => attackerId
        case 2 => defenderId
        case 3 => hpLeft
        case 4 => attack
      }
    }
    def companion = netmsg.game.AttackEvt
}

object AttackEvt extends com.trueaccord.scalapb.GeneratedMessageCompanion[AttackEvt]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[AttackEvt]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.AttackEvt = netmsg.game.AttackEvt(
    attackerId = fieldsMap(1).asInstanceOf[netmsg.game.WObjID],
    defenderId = fieldsMap(2).asInstanceOf[netmsg.game.WObjID],
    hpLeft = fieldsMap(3).asInstanceOf[Int],
    attack = fieldsMap(4).asInstanceOf[netmsg.game.Attack]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("AttackEvt", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.AttackEvt"))
  lazy val defaultInstance = netmsg.game.AttackEvt(
    attackerId = netmsg.game.WObjID.defaultInstance,
    defenderId = netmsg.game.WObjID.defaultInstance,
    hpLeft = 0,
    attack = netmsg.game.Attack.defaultInstance
  )
  implicit class AttackEvtLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, AttackEvt]) extends com.trueaccord.lenses.ObjectLens[UpperPB, AttackEvt](_l) {
    def attackerId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjID] = field(_.attackerId)((c_, f_) => c_.copy(attackerId = f_))
    def defenderId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjID] = field(_.defenderId)((c_, f_) => c_.copy(defenderId = f_))
    def hpLeft: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.hpLeft)((c_, f_) => c_.copy(hpLeft = f_))
    def attack: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.Attack] = field(_.attack)((c_, f_) => c_.copy(attack = f_))
  }
  final val ATTACKER_ID_FIELD_NUMBER = 1
  final val DEFENDER_ID_FIELD_NUMBER = 2
  final val HP_LEFT_FIELD_NUMBER = 3
  final val ATTACK_FIELD_NUMBER = 4
}
