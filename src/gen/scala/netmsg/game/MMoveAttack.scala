// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class MMoveAttack(
    move: netmsg.game.MMove,
    target: netmsg.game.MAttack.Target
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MMoveAttack] with com.trueaccord.lenses.Updatable[MMoveAttack] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(move.serializedSize) + move.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(target.serializedSize) + target.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(move.serializedSize)
      move.writeTo(output)
      output.writeTag(2, 2)
      output.writeRawVarint32(target.serializedSize)
      target.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.MMoveAttack = {
      var __move = this.move
      var __target = this.target
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __move = com.trueaccord.scalapb.LiteParser.readMessage(__input, __move)
          case 18 =>
            __target = com.trueaccord.scalapb.LiteParser.readMessage(__input, __target)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.MMoveAttack(
          move = __move,
          target = __target
      )
    }
    def withMove(__v: netmsg.game.MMove): MMoveAttack = copy(move = __v)
    def withTarget(__v: netmsg.game.MAttack.Target): MMoveAttack = copy(target = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => move
        case 2 => target
      }
    }
    def companion = netmsg.game.MMoveAttack
}

object MMoveAttack extends com.trueaccord.scalapb.GeneratedMessageCompanion[MMoveAttack]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[MMoveAttack]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.MMoveAttack = netmsg.game.MMoveAttack(
    move = fieldsMap(1).asInstanceOf[netmsg.game.MMove],
    target = fieldsMap(2).asInstanceOf[netmsg.game.MAttack.Target]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("MMoveAttack", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.MMoveAttack"))
  lazy val defaultInstance = netmsg.game.MMoveAttack(
    move = netmsg.game.MMove.defaultInstance,
    target = netmsg.game.MAttack.Target.defaultInstance
  )
  implicit class MMoveAttackLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, MMoveAttack]) extends com.trueaccord.lenses.ObjectLens[UpperPB, MMoveAttack](_l) {
    def move: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.MMove] = field(_.move)((c_, f_) => c_.copy(move = f_))
    def target: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.MAttack.Target] = field(_.target)((c_, f_) => c_.copy(target = f_))
  }
  final val MOVE_FIELD_NUMBER = 1
  final val TARGET_FIELD_NUMBER = 2
}
