// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class WObject(
    asteroid: Option[netmsg.game.WObject.Asteroid] = None,
    rock: Option[netmsg.game.WObject.Rock] = None,
    crystal: Option[netmsg.game.WObject.Crystal] = None,
    brush: Option[netmsg.game.WObject.Brush] = None,
    warpGate: Option[netmsg.game.WObject.WarpGate] = None,
    extractor: Option[netmsg.game.WObject.Extractor] = None,
    warpLinker: Option[netmsg.game.WObject.WarpLinker] = None,
    spawner: Option[netmsg.game.WObject.Spawner] = None,
    laserTower: Option[netmsg.game.WObject.LaserTower] = None,
    corvette: Option[netmsg.game.WObject.Corvette] = None,
    wasp: Option[netmsg.game.WObject.Wasp] = None,
    scout: Option[netmsg.game.WObject.Scout] = None,
    rayShip: Option[netmsg.game.WObject.RayShip] = None,
    rocketFrigate: Option[netmsg.game.WObject.RocketFrigate] = None,
    gunship: Option[netmsg.game.WObject.Gunship] = None,
    fortress: Option[netmsg.game.WObject.Fortress] = None,
    vpTower: Option[netmsg.game.WObject.VpTower] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[WObject] with com.trueaccord.lenses.Updatable[WObject] {
    lazy val serializedSize: Int = {
      var __size = 0
      if (asteroid.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(asteroid.get.serializedSize) + asteroid.get.serializedSize }
      if (rock.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(rock.get.serializedSize) + rock.get.serializedSize }
      if (crystal.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(crystal.get.serializedSize) + crystal.get.serializedSize }
      if (brush.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(brush.get.serializedSize) + brush.get.serializedSize }
      if (warpGate.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpGate.get.serializedSize) + warpGate.get.serializedSize }
      if (extractor.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(extractor.get.serializedSize) + extractor.get.serializedSize }
      if (warpLinker.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpLinker.get.serializedSize) + warpLinker.get.serializedSize }
      if (spawner.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(spawner.get.serializedSize) + spawner.get.serializedSize }
      if (laserTower.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(laserTower.get.serializedSize) + laserTower.get.serializedSize }
      if (corvette.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(corvette.get.serializedSize) + corvette.get.serializedSize }
      if (wasp.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(wasp.get.serializedSize) + wasp.get.serializedSize }
      if (scout.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(scout.get.serializedSize) + scout.get.serializedSize }
      if (rayShip.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(rayShip.get.serializedSize) + rayShip.get.serializedSize }
      if (rocketFrigate.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(rocketFrigate.get.serializedSize) + rocketFrigate.get.serializedSize }
      if (gunship.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(gunship.get.serializedSize) + gunship.get.serializedSize }
      if (fortress.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fortress.get.serializedSize) + fortress.get.serializedSize }
      if (vpTower.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(vpTower.get.serializedSize) + vpTower.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      asteroid.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      rock.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      crystal.foreach { v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      brush.foreach { v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      warpGate.foreach { v => 
        output.writeTag(5, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      extractor.foreach { v => 
        output.writeTag(6, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      warpLinker.foreach { v => 
        output.writeTag(7, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      spawner.foreach { v => 
        output.writeTag(8, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      laserTower.foreach { v => 
        output.writeTag(9, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      corvette.foreach { v => 
        output.writeTag(10, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      wasp.foreach { v => 
        output.writeTag(11, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      scout.foreach { v => 
        output.writeTag(12, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      rayShip.foreach { v => 
        output.writeTag(13, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      rocketFrigate.foreach { v => 
        output.writeTag(14, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      gunship.foreach { v => 
        output.writeTag(15, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      fortress.foreach { v => 
        output.writeTag(16, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      vpTower.foreach { v => 
        output.writeTag(17, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject = {
      var __asteroid = this.asteroid
      var __rock = this.rock
      var __crystal = this.crystal
      var __brush = this.brush
      var __warpGate = this.warpGate
      var __extractor = this.extractor
      var __warpLinker = this.warpLinker
      var __spawner = this.spawner
      var __laserTower = this.laserTower
      var __corvette = this.corvette
      var __wasp = this.wasp
      var __scout = this.scout
      var __rayShip = this.rayShip
      var __rocketFrigate = this.rocketFrigate
      var __gunship = this.gunship
      var __fortress = this.fortress
      var __vpTower = this.vpTower
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __asteroid = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __asteroid.getOrElse(netmsg.game.WObject.Asteroid.defaultInstance)))
          case 18 =>
            __rock = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __rock.getOrElse(netmsg.game.WObject.Rock.defaultInstance)))
          case 26 =>
            __crystal = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __crystal.getOrElse(netmsg.game.WObject.Crystal.defaultInstance)))
          case 34 =>
            __brush = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __brush.getOrElse(netmsg.game.WObject.Brush.defaultInstance)))
          case 42 =>
            __warpGate = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpGate.getOrElse(netmsg.game.WObject.WarpGate.defaultInstance)))
          case 50 =>
            __extractor = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __extractor.getOrElse(netmsg.game.WObject.Extractor.defaultInstance)))
          case 58 =>
            __warpLinker = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpLinker.getOrElse(netmsg.game.WObject.WarpLinker.defaultInstance)))
          case 66 =>
            __spawner = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __spawner.getOrElse(netmsg.game.WObject.Spawner.defaultInstance)))
          case 74 =>
            __laserTower = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __laserTower.getOrElse(netmsg.game.WObject.LaserTower.defaultInstance)))
          case 82 =>
            __corvette = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __corvette.getOrElse(netmsg.game.WObject.Corvette.defaultInstance)))
          case 90 =>
            __wasp = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __wasp.getOrElse(netmsg.game.WObject.Wasp.defaultInstance)))
          case 98 =>
            __scout = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __scout.getOrElse(netmsg.game.WObject.Scout.defaultInstance)))
          case 106 =>
            __rayShip = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __rayShip.getOrElse(netmsg.game.WObject.RayShip.defaultInstance)))
          case 114 =>
            __rocketFrigate = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __rocketFrigate.getOrElse(netmsg.game.WObject.RocketFrigate.defaultInstance)))
          case 122 =>
            __gunship = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __gunship.getOrElse(netmsg.game.WObject.Gunship.defaultInstance)))
          case 130 =>
            __fortress = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __fortress.getOrElse(netmsg.game.WObject.Fortress.defaultInstance)))
          case 138 =>
            __vpTower = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __vpTower.getOrElse(netmsg.game.WObject.VpTower.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.WObject(
          asteroid = __asteroid,
          rock = __rock,
          crystal = __crystal,
          brush = __brush,
          warpGate = __warpGate,
          extractor = __extractor,
          warpLinker = __warpLinker,
          spawner = __spawner,
          laserTower = __laserTower,
          corvette = __corvette,
          wasp = __wasp,
          scout = __scout,
          rayShip = __rayShip,
          rocketFrigate = __rocketFrigate,
          gunship = __gunship,
          fortress = __fortress,
          vpTower = __vpTower
      )
    }
    def getAsteroid: netmsg.game.WObject.Asteroid = asteroid.getOrElse(netmsg.game.WObject.Asteroid.defaultInstance)
    def clearAsteroid: WObject = copy(asteroid = None)
    def withAsteroid(__v: netmsg.game.WObject.Asteroid): WObject = copy(asteroid = Some(__v))
    def getRock: netmsg.game.WObject.Rock = rock.getOrElse(netmsg.game.WObject.Rock.defaultInstance)
    def clearRock: WObject = copy(rock = None)
    def withRock(__v: netmsg.game.WObject.Rock): WObject = copy(rock = Some(__v))
    def getCrystal: netmsg.game.WObject.Crystal = crystal.getOrElse(netmsg.game.WObject.Crystal.defaultInstance)
    def clearCrystal: WObject = copy(crystal = None)
    def withCrystal(__v: netmsg.game.WObject.Crystal): WObject = copy(crystal = Some(__v))
    def getBrush: netmsg.game.WObject.Brush = brush.getOrElse(netmsg.game.WObject.Brush.defaultInstance)
    def clearBrush: WObject = copy(brush = None)
    def withBrush(__v: netmsg.game.WObject.Brush): WObject = copy(brush = Some(__v))
    def getWarpGate: netmsg.game.WObject.WarpGate = warpGate.getOrElse(netmsg.game.WObject.WarpGate.defaultInstance)
    def clearWarpGate: WObject = copy(warpGate = None)
    def withWarpGate(__v: netmsg.game.WObject.WarpGate): WObject = copy(warpGate = Some(__v))
    def getExtractor: netmsg.game.WObject.Extractor = extractor.getOrElse(netmsg.game.WObject.Extractor.defaultInstance)
    def clearExtractor: WObject = copy(extractor = None)
    def withExtractor(__v: netmsg.game.WObject.Extractor): WObject = copy(extractor = Some(__v))
    def getWarpLinker: netmsg.game.WObject.WarpLinker = warpLinker.getOrElse(netmsg.game.WObject.WarpLinker.defaultInstance)
    def clearWarpLinker: WObject = copy(warpLinker = None)
    def withWarpLinker(__v: netmsg.game.WObject.WarpLinker): WObject = copy(warpLinker = Some(__v))
    def getSpawner: netmsg.game.WObject.Spawner = spawner.getOrElse(netmsg.game.WObject.Spawner.defaultInstance)
    def clearSpawner: WObject = copy(spawner = None)
    def withSpawner(__v: netmsg.game.WObject.Spawner): WObject = copy(spawner = Some(__v))
    def getLaserTower: netmsg.game.WObject.LaserTower = laserTower.getOrElse(netmsg.game.WObject.LaserTower.defaultInstance)
    def clearLaserTower: WObject = copy(laserTower = None)
    def withLaserTower(__v: netmsg.game.WObject.LaserTower): WObject = copy(laserTower = Some(__v))
    def getCorvette: netmsg.game.WObject.Corvette = corvette.getOrElse(netmsg.game.WObject.Corvette.defaultInstance)
    def clearCorvette: WObject = copy(corvette = None)
    def withCorvette(__v: netmsg.game.WObject.Corvette): WObject = copy(corvette = Some(__v))
    def getWasp: netmsg.game.WObject.Wasp = wasp.getOrElse(netmsg.game.WObject.Wasp.defaultInstance)
    def clearWasp: WObject = copy(wasp = None)
    def withWasp(__v: netmsg.game.WObject.Wasp): WObject = copy(wasp = Some(__v))
    def getScout: netmsg.game.WObject.Scout = scout.getOrElse(netmsg.game.WObject.Scout.defaultInstance)
    def clearScout: WObject = copy(scout = None)
    def withScout(__v: netmsg.game.WObject.Scout): WObject = copy(scout = Some(__v))
    def getRayShip: netmsg.game.WObject.RayShip = rayShip.getOrElse(netmsg.game.WObject.RayShip.defaultInstance)
    def clearRayShip: WObject = copy(rayShip = None)
    def withRayShip(__v: netmsg.game.WObject.RayShip): WObject = copy(rayShip = Some(__v))
    def getRocketFrigate: netmsg.game.WObject.RocketFrigate = rocketFrigate.getOrElse(netmsg.game.WObject.RocketFrigate.defaultInstance)
    def clearRocketFrigate: WObject = copy(rocketFrigate = None)
    def withRocketFrigate(__v: netmsg.game.WObject.RocketFrigate): WObject = copy(rocketFrigate = Some(__v))
    def getGunship: netmsg.game.WObject.Gunship = gunship.getOrElse(netmsg.game.WObject.Gunship.defaultInstance)
    def clearGunship: WObject = copy(gunship = None)
    def withGunship(__v: netmsg.game.WObject.Gunship): WObject = copy(gunship = Some(__v))
    def getFortress: netmsg.game.WObject.Fortress = fortress.getOrElse(netmsg.game.WObject.Fortress.defaultInstance)
    def clearFortress: WObject = copy(fortress = None)
    def withFortress(__v: netmsg.game.WObject.Fortress): WObject = copy(fortress = Some(__v))
    def getVpTower: netmsg.game.WObject.VpTower = vpTower.getOrElse(netmsg.game.WObject.VpTower.defaultInstance)
    def clearVpTower: WObject = copy(vpTower = None)
    def withVpTower(__v: netmsg.game.WObject.VpTower): WObject = copy(vpTower = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => asteroid
        case 2 => rock
        case 3 => crystal
        case 4 => brush
        case 5 => warpGate
        case 6 => extractor
        case 7 => warpLinker
        case 8 => spawner
        case 9 => laserTower
        case 10 => corvette
        case 11 => wasp
        case 12 => scout
        case 13 => rayShip
        case 14 => rocketFrigate
        case 15 => gunship
        case 16 => fortress
        case 17 => vpTower
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.toJavaProto(this))
    def companion = netmsg.game.WObject
}

object WObject extends com.trueaccord.scalapb.GeneratedMessageCompanion[WObject] with com.trueaccord.scalapb.JavaProtoSupport[WObject, netmsg.Game.WObject]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[WObject] with com.trueaccord.scalapb.JavaProtoSupport[WObject, netmsg.Game.WObject]  = this
  def toJavaProto(scalaPbSource: netmsg.game.WObject): netmsg.Game.WObject = {
    val javaPbOut = netmsg.Game.WObject.newBuilder
    scalaPbSource.asteroid.map(netmsg.game.WObject.Asteroid.toJavaProto).foreach(javaPbOut.setAsteroid)
    scalaPbSource.rock.map(netmsg.game.WObject.Rock.toJavaProto).foreach(javaPbOut.setRock)
    scalaPbSource.crystal.map(netmsg.game.WObject.Crystal.toJavaProto).foreach(javaPbOut.setCrystal)
    scalaPbSource.brush.map(netmsg.game.WObject.Brush.toJavaProto).foreach(javaPbOut.setBrush)
    scalaPbSource.warpGate.map(netmsg.game.WObject.WarpGate.toJavaProto).foreach(javaPbOut.setWarpGate)
    scalaPbSource.extractor.map(netmsg.game.WObject.Extractor.toJavaProto).foreach(javaPbOut.setExtractor)
    scalaPbSource.warpLinker.map(netmsg.game.WObject.WarpLinker.toJavaProto).foreach(javaPbOut.setWarpLinker)
    scalaPbSource.spawner.map(netmsg.game.WObject.Spawner.toJavaProto).foreach(javaPbOut.setSpawner)
    scalaPbSource.laserTower.map(netmsg.game.WObject.LaserTower.toJavaProto).foreach(javaPbOut.setLaserTower)
    scalaPbSource.corvette.map(netmsg.game.WObject.Corvette.toJavaProto).foreach(javaPbOut.setCorvette)
    scalaPbSource.wasp.map(netmsg.game.WObject.Wasp.toJavaProto).foreach(javaPbOut.setWasp)
    scalaPbSource.scout.map(netmsg.game.WObject.Scout.toJavaProto).foreach(javaPbOut.setScout)
    scalaPbSource.rayShip.map(netmsg.game.WObject.RayShip.toJavaProto).foreach(javaPbOut.setRayShip)
    scalaPbSource.rocketFrigate.map(netmsg.game.WObject.RocketFrigate.toJavaProto).foreach(javaPbOut.setRocketFrigate)
    scalaPbSource.gunship.map(netmsg.game.WObject.Gunship.toJavaProto).foreach(javaPbOut.setGunship)
    scalaPbSource.fortress.map(netmsg.game.WObject.Fortress.toJavaProto).foreach(javaPbOut.setFortress)
    scalaPbSource.vpTower.map(netmsg.game.WObject.VpTower.toJavaProto).foreach(javaPbOut.setVpTower)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Game.WObject): netmsg.game.WObject = netmsg.game.WObject(
    asteroid = if (javaPbSource.hasAsteroid) Some(netmsg.game.WObject.Asteroid.fromJavaProto(javaPbSource.getAsteroid)) else None,
    rock = if (javaPbSource.hasRock) Some(netmsg.game.WObject.Rock.fromJavaProto(javaPbSource.getRock)) else None,
    crystal = if (javaPbSource.hasCrystal) Some(netmsg.game.WObject.Crystal.fromJavaProto(javaPbSource.getCrystal)) else None,
    brush = if (javaPbSource.hasBrush) Some(netmsg.game.WObject.Brush.fromJavaProto(javaPbSource.getBrush)) else None,
    warpGate = if (javaPbSource.hasWarpGate) Some(netmsg.game.WObject.WarpGate.fromJavaProto(javaPbSource.getWarpGate)) else None,
    extractor = if (javaPbSource.hasExtractor) Some(netmsg.game.WObject.Extractor.fromJavaProto(javaPbSource.getExtractor)) else None,
    warpLinker = if (javaPbSource.hasWarpLinker) Some(netmsg.game.WObject.WarpLinker.fromJavaProto(javaPbSource.getWarpLinker)) else None,
    spawner = if (javaPbSource.hasSpawner) Some(netmsg.game.WObject.Spawner.fromJavaProto(javaPbSource.getSpawner)) else None,
    laserTower = if (javaPbSource.hasLaserTower) Some(netmsg.game.WObject.LaserTower.fromJavaProto(javaPbSource.getLaserTower)) else None,
    corvette = if (javaPbSource.hasCorvette) Some(netmsg.game.WObject.Corvette.fromJavaProto(javaPbSource.getCorvette)) else None,
    wasp = if (javaPbSource.hasWasp) Some(netmsg.game.WObject.Wasp.fromJavaProto(javaPbSource.getWasp)) else None,
    scout = if (javaPbSource.hasScout) Some(netmsg.game.WObject.Scout.fromJavaProto(javaPbSource.getScout)) else None,
    rayShip = if (javaPbSource.hasRayShip) Some(netmsg.game.WObject.RayShip.fromJavaProto(javaPbSource.getRayShip)) else None,
    rocketFrigate = if (javaPbSource.hasRocketFrigate) Some(netmsg.game.WObject.RocketFrigate.fromJavaProto(javaPbSource.getRocketFrigate)) else None,
    gunship = if (javaPbSource.hasGunship) Some(netmsg.game.WObject.Gunship.fromJavaProto(javaPbSource.getGunship)) else None,
    fortress = if (javaPbSource.hasFortress) Some(netmsg.game.WObject.Fortress.fromJavaProto(javaPbSource.getFortress)) else None,
    vpTower = if (javaPbSource.hasVpTower) Some(netmsg.game.WObject.VpTower.fromJavaProto(javaPbSource.getVpTower)) else None
  )
  override def fromAscii(ascii: String): netmsg.game.WObject = {
    val javaProtoBuilder = netmsg.Game.WObject.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject = netmsg.game.WObject(
    asteroid = fieldsMap.getOrElse(1, None).asInstanceOf[Option[netmsg.game.WObject.Asteroid]],
    rock = fieldsMap.getOrElse(2, None).asInstanceOf[Option[netmsg.game.WObject.Rock]],
    crystal = fieldsMap.getOrElse(3, None).asInstanceOf[Option[netmsg.game.WObject.Crystal]],
    brush = fieldsMap.getOrElse(4, None).asInstanceOf[Option[netmsg.game.WObject.Brush]],
    warpGate = fieldsMap.getOrElse(5, None).asInstanceOf[Option[netmsg.game.WObject.WarpGate]],
    extractor = fieldsMap.getOrElse(6, None).asInstanceOf[Option[netmsg.game.WObject.Extractor]],
    warpLinker = fieldsMap.getOrElse(7, None).asInstanceOf[Option[netmsg.game.WObject.WarpLinker]],
    spawner = fieldsMap.getOrElse(8, None).asInstanceOf[Option[netmsg.game.WObject.Spawner]],
    laserTower = fieldsMap.getOrElse(9, None).asInstanceOf[Option[netmsg.game.WObject.LaserTower]],
    corvette = fieldsMap.getOrElse(10, None).asInstanceOf[Option[netmsg.game.WObject.Corvette]],
    wasp = fieldsMap.getOrElse(11, None).asInstanceOf[Option[netmsg.game.WObject.Wasp]],
    scout = fieldsMap.getOrElse(12, None).asInstanceOf[Option[netmsg.game.WObject.Scout]],
    rayShip = fieldsMap.getOrElse(13, None).asInstanceOf[Option[netmsg.game.WObject.RayShip]],
    rocketFrigate = fieldsMap.getOrElse(14, None).asInstanceOf[Option[netmsg.game.WObject.RocketFrigate]],
    gunship = fieldsMap.getOrElse(15, None).asInstanceOf[Option[netmsg.game.WObject.Gunship]],
    fortress = fieldsMap.getOrElse(16, None).asInstanceOf[Option[netmsg.game.WObject.Fortress]],
    vpTower = fieldsMap.getOrElse(17, None).asInstanceOf[Option[netmsg.game.WObject.VpTower]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("WObject", this,
    None, m = Seq(netmsg.game.WObject.Base.descriptor, netmsg.game.WObject.OwnedObj.descriptor, netmsg.game.WObject.Warpable.descriptor, netmsg.game.WObject.Fighter.descriptor, netmsg.game.WObject.Movable.descriptor, netmsg.game.WObject.Asteroid.descriptor, netmsg.game.WObject.Rock.descriptor, netmsg.game.WObject.Crystal.descriptor, netmsg.game.WObject.Brush.descriptor, netmsg.game.WObject.WarpGate.descriptor, netmsg.game.WObject.Extractor.descriptor, netmsg.game.WObject.WarpLinker.descriptor, netmsg.game.WObject.Spawner.descriptor, netmsg.game.WObject.LaserTower.descriptor, netmsg.game.WObject.Corvette.descriptor, netmsg.game.WObject.Wasp.descriptor, netmsg.game.WObject.Scout.descriptor, netmsg.game.WObject.RayShip.descriptor, netmsg.game.WObject.RocketFrigate.descriptor, netmsg.game.WObject.Gunship.descriptor, netmsg.game.WObject.Fortress.descriptor, netmsg.game.WObject.VpTower.descriptor),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject"))
  lazy val defaultInstance = netmsg.game.WObject(
  )
  final case class Base(
      id: netmsg.game.WObjID,
      position: netmsg.base.Vect2
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Base] with com.trueaccord.lenses.Updatable[Base] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(id.serializedSize) + id.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(position.serializedSize) + position.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(id.serializedSize)
        id.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(position.serializedSize)
        position.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Base = {
        var __id = this.id
        var __position = this.position
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __id = com.trueaccord.scalapb.LiteParser.readMessage(__input, __id)
            case 18 =>
              __position = com.trueaccord.scalapb.LiteParser.readMessage(__input, __position)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Base(
            id = __id,
            position = __position
        )
      }
      def withId(__v: netmsg.game.WObjID): Base = copy(id = __v)
      def withPosition(__v: netmsg.base.Vect2): Base = copy(position = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => id
          case 2 => position
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Base.toJavaProto(this))
      def companion = netmsg.game.WObject.Base
  }
  
  object Base extends com.trueaccord.scalapb.GeneratedMessageCompanion[Base] with com.trueaccord.scalapb.JavaProtoSupport[Base, netmsg.Game.WObject.Base]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Base] with com.trueaccord.scalapb.JavaProtoSupport[Base, netmsg.Game.WObject.Base]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Base): netmsg.Game.WObject.Base = {
      val javaPbOut = netmsg.Game.WObject.Base.newBuilder
      javaPbOut.setId(netmsg.game.WObjID.toJavaProto(scalaPbSource.id))
      javaPbOut.setPosition(netmsg.base.Vect2.toJavaProto(scalaPbSource.position))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Base): netmsg.game.WObject.Base = netmsg.game.WObject.Base(
      id = netmsg.game.WObjID.fromJavaProto(javaPbSource.getId),
      position = netmsg.base.Vect2.fromJavaProto(javaPbSource.getPosition)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Base = {
      val javaProtoBuilder = netmsg.Game.WObject.Base.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Base = netmsg.game.WObject.Base(
      id = fieldsMap(1).asInstanceOf[netmsg.game.WObjID],
      position = fieldsMap(2).asInstanceOf[netmsg.base.Vect2]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Base", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Base"))
    lazy val defaultInstance = netmsg.game.WObject.Base(
      id = netmsg.game.WObjID.defaultInstance,
      position = netmsg.base.Vect2.defaultInstance
    )
    implicit class BaseLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Base]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Base](_l) {
      def id: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjID] = field(_.id)((c_, f_) => c_.copy(id = f_))
      def position: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Vect2] = field(_.position)((c_, f_) => c_.copy(position = f_))
    }
    final val ID_FIELD_NUMBER = 1
    final val POSITION_FIELD_NUMBER = 2
  }
  
  final case class OwnedObj(
      ownerId: netmsg.game.OwnerID,
      hp: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OwnedObj] with com.trueaccord.lenses.Updatable[OwnedObj] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(ownerId.serializedSize) + ownerId.serializedSize
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(3, hp)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(2, 2)
        output.writeRawVarint32(ownerId.serializedSize)
        ownerId.writeTo(output)
        output.writeUInt32(3, hp)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.OwnedObj = {
        var __ownerId = this.ownerId
        var __hp = this.hp
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 18 =>
              __ownerId = com.trueaccord.scalapb.LiteParser.readMessage(__input, __ownerId)
            case 24 =>
              __hp = __input.readUInt32()
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.OwnedObj(
            ownerId = __ownerId,
            hp = __hp
        )
      }
      def withOwnerId(__v: netmsg.game.OwnerID): OwnedObj = copy(ownerId = __v)
      def withHp(__v: Int): OwnedObj = copy(hp = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 2 => ownerId
          case 3 => hp
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.OwnedObj.toJavaProto(this))
      def companion = netmsg.game.WObject.OwnedObj
  }
  
  object OwnedObj extends com.trueaccord.scalapb.GeneratedMessageCompanion[OwnedObj] with com.trueaccord.scalapb.JavaProtoSupport[OwnedObj, netmsg.Game.WObject.OwnedObj]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[OwnedObj] with com.trueaccord.scalapb.JavaProtoSupport[OwnedObj, netmsg.Game.WObject.OwnedObj]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.OwnedObj): netmsg.Game.WObject.OwnedObj = {
      val javaPbOut = netmsg.Game.WObject.OwnedObj.newBuilder
      javaPbOut.setOwnerId(netmsg.game.OwnerID.toJavaProto(scalaPbSource.ownerId))
      javaPbOut.setHp(scalaPbSource.hp)
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.OwnedObj): netmsg.game.WObject.OwnedObj = netmsg.game.WObject.OwnedObj(
      ownerId = netmsg.game.OwnerID.fromJavaProto(javaPbSource.getOwnerId),
      hp = javaPbSource.getHp.intValue
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.OwnedObj = {
      val javaProtoBuilder = netmsg.Game.WObject.OwnedObj.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.OwnedObj = netmsg.game.WObject.OwnedObj(
      ownerId = fieldsMap(2).asInstanceOf[netmsg.game.OwnerID],
      hp = fieldsMap(3).asInstanceOf[Int]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("OwnedObj", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.OwnedObj"))
    lazy val defaultInstance = netmsg.game.WObject.OwnedObj(
      ownerId = netmsg.game.OwnerID.defaultInstance,
      hp = 0
    )
    implicit class OwnedObjLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, OwnedObj]) extends com.trueaccord.lenses.ObjectLens[UpperPB, OwnedObj](_l) {
      def ownerId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.OwnerID] = field(_.ownerId)((c_, f_) => c_.copy(ownerId = f_))
      def hp: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.hp)((c_, f_) => c_.copy(hp = f_))
    }
    final val OWNER_ID_FIELD_NUMBER = 2
    final val HP_FIELD_NUMBER = 3
  }
  
  final case class Warpable(
      warpState: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Warpable] with com.trueaccord.lenses.Updatable[Warpable] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, warpState)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeUInt32(2, warpState)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Warpable = {
        var __warpState = this.warpState
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 16 =>
              __warpState = __input.readUInt32()
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Warpable(
            warpState = __warpState
        )
      }
      def withWarpState(__v: Int): Warpable = copy(warpState = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 2 => warpState
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Warpable.toJavaProto(this))
      def companion = netmsg.game.WObject.Warpable
  }
  
  object Warpable extends com.trueaccord.scalapb.GeneratedMessageCompanion[Warpable] with com.trueaccord.scalapb.JavaProtoSupport[Warpable, netmsg.Game.WObject.Warpable]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Warpable] with com.trueaccord.scalapb.JavaProtoSupport[Warpable, netmsg.Game.WObject.Warpable]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Warpable): netmsg.Game.WObject.Warpable = {
      val javaPbOut = netmsg.Game.WObject.Warpable.newBuilder
      javaPbOut.setWarpState(scalaPbSource.warpState)
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Warpable): netmsg.game.WObject.Warpable = netmsg.game.WObject.Warpable(
      warpState = javaPbSource.getWarpState.intValue
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Warpable = {
      val javaProtoBuilder = netmsg.Game.WObject.Warpable.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Warpable = netmsg.game.WObject.Warpable(
      warpState = fieldsMap(2).asInstanceOf[Int]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Warpable", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Warpable"))
    lazy val defaultInstance = netmsg.game.WObject.Warpable(
      warpState = 0
    )
    implicit class WarpableLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Warpable]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Warpable](_l) {
      def warpState: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.warpState)((c_, f_) => c_.copy(warpState = f_))
    }
    final val WARP_STATE_FIELD_NUMBER = 2
  }
  
  final case class Fighter(
      attacksLeft: Int,
      level: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Fighter] with com.trueaccord.lenses.Updatable[Fighter] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, attacksLeft)
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(3, level)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeUInt32(2, attacksLeft)
        output.writeUInt32(3, level)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Fighter = {
        var __attacksLeft = this.attacksLeft
        var __level = this.level
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 16 =>
              __attacksLeft = __input.readUInt32()
            case 24 =>
              __level = __input.readUInt32()
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Fighter(
            attacksLeft = __attacksLeft,
            level = __level
        )
      }
      def withAttacksLeft(__v: Int): Fighter = copy(attacksLeft = __v)
      def withLevel(__v: Int): Fighter = copy(level = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 2 => attacksLeft
          case 3 => level
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Fighter.toJavaProto(this))
      def companion = netmsg.game.WObject.Fighter
  }
  
  object Fighter extends com.trueaccord.scalapb.GeneratedMessageCompanion[Fighter] with com.trueaccord.scalapb.JavaProtoSupport[Fighter, netmsg.Game.WObject.Fighter]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Fighter] with com.trueaccord.scalapb.JavaProtoSupport[Fighter, netmsg.Game.WObject.Fighter]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Fighter): netmsg.Game.WObject.Fighter = {
      val javaPbOut = netmsg.Game.WObject.Fighter.newBuilder
      javaPbOut.setAttacksLeft(scalaPbSource.attacksLeft)
      javaPbOut.setLevel(scalaPbSource.level)
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Fighter): netmsg.game.WObject.Fighter = netmsg.game.WObject.Fighter(
      attacksLeft = javaPbSource.getAttacksLeft.intValue,
      level = javaPbSource.getLevel.intValue
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Fighter = {
      val javaProtoBuilder = netmsg.Game.WObject.Fighter.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Fighter = netmsg.game.WObject.Fighter(
      attacksLeft = fieldsMap(2).asInstanceOf[Int],
      level = fieldsMap(3).asInstanceOf[Int]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Fighter", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Fighter"))
    lazy val defaultInstance = netmsg.game.WObject.Fighter(
      attacksLeft = 0,
      level = 0
    )
    implicit class FighterLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Fighter]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Fighter](_l) {
      def attacksLeft: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.attacksLeft)((c_, f_) => c_.copy(attacksLeft = f_))
      def level: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.level)((c_, f_) => c_.copy(level = f_))
    }
    final val ATTACKSLEFT_FIELD_NUMBER = 2
    final val LEVEL_FIELD_NUMBER = 3
  }
  
  final case class Movable(
      movement: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Movable] with com.trueaccord.lenses.Updatable[Movable] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, movement)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeUInt32(2, movement)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Movable = {
        var __movement = this.movement
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 16 =>
              __movement = __input.readUInt32()
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Movable(
            movement = __movement
        )
      }
      def withMovement(__v: Int): Movable = copy(movement = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 2 => movement
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Movable.toJavaProto(this))
      def companion = netmsg.game.WObject.Movable
  }
  
  object Movable extends com.trueaccord.scalapb.GeneratedMessageCompanion[Movable] with com.trueaccord.scalapb.JavaProtoSupport[Movable, netmsg.Game.WObject.Movable]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Movable] with com.trueaccord.scalapb.JavaProtoSupport[Movable, netmsg.Game.WObject.Movable]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Movable): netmsg.Game.WObject.Movable = {
      val javaPbOut = netmsg.Game.WObject.Movable.newBuilder
      javaPbOut.setMovement(scalaPbSource.movement)
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Movable): netmsg.game.WObject.Movable = netmsg.game.WObject.Movable(
      movement = javaPbSource.getMovement.intValue
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Movable = {
      val javaProtoBuilder = netmsg.Game.WObject.Movable.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Movable = netmsg.game.WObject.Movable(
      movement = fieldsMap(2).asInstanceOf[Int]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Movable", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Movable"))
    lazy val defaultInstance = netmsg.game.WObject.Movable(
      movement = 0
    )
    implicit class MovableLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Movable]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Movable](_l) {
      def movement: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.movement)((c_, f_) => c_.copy(movement = f_))
    }
    final val MOVEMENT_FIELD_NUMBER = 2
  }
  
  final case class Asteroid(
      stats: netmsg.game.WObjectStats.Asteroid,
      base: netmsg.game.WObject.Base,
      resources: Int,
      extractionSpeed: netmsg.game.WObject.Asteroid.ExtractionSpeed
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Asteroid] with com.trueaccord.lenses.Updatable[Asteroid] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(3, resources)
        __size += com.google.protobuf.CodedOutputStream.computeEnumSize(4, extractionSpeed.id)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeUInt32(3, resources)
        output.writeEnum(4, extractionSpeed.id)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Asteroid = {
        var __stats = this.stats
        var __base = this.base
        var __resources = this.resources
        var __extractionSpeed = this.extractionSpeed
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 24 =>
              __resources = __input.readUInt32()
            case 32 =>
              __extractionSpeed = netmsg.game.WObject.Asteroid.ExtractionSpeed.fromValue(__input.readEnum())
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Asteroid(
            stats = __stats,
            base = __base,
            resources = __resources,
            extractionSpeed = __extractionSpeed
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Asteroid): Asteroid = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Asteroid = copy(base = __v)
      def withResources(__v: Int): Asteroid = copy(resources = __v)
      def withExtractionSpeed(__v: netmsg.game.WObject.Asteroid.ExtractionSpeed): Asteroid = copy(extractionSpeed = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => resources
          case 4 => extractionSpeed
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Asteroid.toJavaProto(this))
      def companion = netmsg.game.WObject.Asteroid
  }
  
  object Asteroid extends com.trueaccord.scalapb.GeneratedMessageCompanion[Asteroid] with com.trueaccord.scalapb.JavaProtoSupport[Asteroid, netmsg.Game.WObject.Asteroid]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Asteroid] with com.trueaccord.scalapb.JavaProtoSupport[Asteroid, netmsg.Game.WObject.Asteroid]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Asteroid): netmsg.Game.WObject.Asteroid = {
      val javaPbOut = netmsg.Game.WObject.Asteroid.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Asteroid.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setResources(scalaPbSource.resources)
      javaPbOut.setExtractionSpeed(netmsg.game.WObject.Asteroid.ExtractionSpeed.toJavaValue(scalaPbSource.extractionSpeed))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Asteroid): netmsg.game.WObject.Asteroid = netmsg.game.WObject.Asteroid(
      stats = netmsg.game.WObjectStats.Asteroid.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      resources = javaPbSource.getResources.intValue,
      extractionSpeed = netmsg.game.WObject.Asteroid.ExtractionSpeed.fromJavaValue(javaPbSource.getExtractionSpeed)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Asteroid = {
      val javaProtoBuilder = netmsg.Game.WObject.Asteroid.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Asteroid = netmsg.game.WObject.Asteroid(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Asteroid],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      resources = fieldsMap(3).asInstanceOf[Int],
      extractionSpeed = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Asteroid.ExtractionSpeed]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Asteroid", this,
      None, m = Seq(),
      e = Seq(netmsg.game.WObject.Asteroid.ExtractionSpeed.descriptor),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Asteroid"))
    lazy val defaultInstance = netmsg.game.WObject.Asteroid(
      stats = netmsg.game.WObjectStats.Asteroid.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      resources = 0,
      extractionSpeed = netmsg.game.WObject.Asteroid.ExtractionSpeed.SLOW
    )
    sealed trait ExtractionSpeed extends com.trueaccord.scalapb.GeneratedEnum {
      def isSlow: Boolean = false
      def isMedium: Boolean = false
      def isFast: Boolean = false
    }
    
    object ExtractionSpeed extends com.trueaccord.scalapb.GeneratedEnumCompanion[ExtractionSpeed] {
      case object SLOW extends ExtractionSpeed {
        val id = 1
        val name = "SLOW"
        override def isSlow: Boolean = true
      }
      
      case object MEDIUM extends ExtractionSpeed {
        val id = 2
        val name = "MEDIUM"
        override def isMedium: Boolean = true
      }
      
      case object FAST extends ExtractionSpeed {
        val id = 3
        val name = "FAST"
        override def isFast: Boolean = true
      }
      
      lazy val values = Seq(SLOW, MEDIUM, FAST)
      def fromValue(value: Int): ExtractionSpeed = value match {
        case 1 => SLOW
        case 2 => MEDIUM
        case 3 => FAST
      }
      lazy val descriptor = new Descriptors.EnumDescriptor(0, "ExtractionSpeed", this)
      def fromJavaValue(pbJavaSource: netmsg.Game.WObject.Asteroid.ExtractionSpeed): ExtractionSpeed = fromValue(pbJavaSource.getNumber)
      def toJavaValue(pbScalaSource: ExtractionSpeed): netmsg.Game.WObject.Asteroid.ExtractionSpeed = netmsg.Game.WObject.Asteroid.ExtractionSpeed.valueOf(pbScalaSource.id)
    }
    implicit class AsteroidLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Asteroid]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Asteroid](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Asteroid] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def resources: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.resources)((c_, f_) => c_.copy(resources = f_))
      def extractionSpeed: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Asteroid.ExtractionSpeed] = field(_.extractionSpeed)((c_, f_) => c_.copy(extractionSpeed = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val RESOURCES_FIELD_NUMBER = 3
    final val EXTRACTION_SPEED_FIELD_NUMBER = 4
  }
  
  final case class Rock(
      stats: netmsg.game.WObjectStats.Rock,
      base: netmsg.game.WObject.Base
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Rock] with com.trueaccord.lenses.Updatable[Rock] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Rock = {
        var __stats = this.stats
        var __base = this.base
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Rock(
            stats = __stats,
            base = __base
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Rock): Rock = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Rock = copy(base = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Rock.toJavaProto(this))
      def companion = netmsg.game.WObject.Rock
  }
  
  object Rock extends com.trueaccord.scalapb.GeneratedMessageCompanion[Rock] with com.trueaccord.scalapb.JavaProtoSupport[Rock, netmsg.Game.WObject.Rock]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Rock] with com.trueaccord.scalapb.JavaProtoSupport[Rock, netmsg.Game.WObject.Rock]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Rock): netmsg.Game.WObject.Rock = {
      val javaPbOut = netmsg.Game.WObject.Rock.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Rock.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Rock): netmsg.game.WObject.Rock = netmsg.game.WObject.Rock(
      stats = netmsg.game.WObjectStats.Rock.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Rock = {
      val javaProtoBuilder = netmsg.Game.WObject.Rock.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Rock = netmsg.game.WObject.Rock(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Rock],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Rock", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Rock"))
    lazy val defaultInstance = netmsg.game.WObject.Rock(
      stats = netmsg.game.WObjectStats.Rock.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance
    )
    implicit class RockLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Rock]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Rock](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Rock] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
  }
  
  final case class Crystal(
      stats: netmsg.game.WObjectStats.Crystal,
      base: netmsg.game.WObject.Base
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Crystal] with com.trueaccord.lenses.Updatable[Crystal] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Crystal = {
        var __stats = this.stats
        var __base = this.base
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Crystal(
            stats = __stats,
            base = __base
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Crystal): Crystal = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Crystal = copy(base = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Crystal.toJavaProto(this))
      def companion = netmsg.game.WObject.Crystal
  }
  
  object Crystal extends com.trueaccord.scalapb.GeneratedMessageCompanion[Crystal] with com.trueaccord.scalapb.JavaProtoSupport[Crystal, netmsg.Game.WObject.Crystal]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Crystal] with com.trueaccord.scalapb.JavaProtoSupport[Crystal, netmsg.Game.WObject.Crystal]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Crystal): netmsg.Game.WObject.Crystal = {
      val javaPbOut = netmsg.Game.WObject.Crystal.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Crystal.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Crystal): netmsg.game.WObject.Crystal = netmsg.game.WObject.Crystal(
      stats = netmsg.game.WObjectStats.Crystal.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Crystal = {
      val javaProtoBuilder = netmsg.Game.WObject.Crystal.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Crystal = netmsg.game.WObject.Crystal(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Crystal],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Crystal", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Crystal"))
    lazy val defaultInstance = netmsg.game.WObject.Crystal(
      stats = netmsg.game.WObjectStats.Crystal.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance
    )
    implicit class CrystalLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Crystal]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Crystal](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Crystal] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
  }
  
  final case class Brush(
      stats: netmsg.game.WObjectStats.Brush,
      base: netmsg.game.WObject.Base
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Brush] with com.trueaccord.lenses.Updatable[Brush] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Brush = {
        var __stats = this.stats
        var __base = this.base
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Brush(
            stats = __stats,
            base = __base
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Brush): Brush = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Brush = copy(base = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Brush.toJavaProto(this))
      def companion = netmsg.game.WObject.Brush
  }
  
  object Brush extends com.trueaccord.scalapb.GeneratedMessageCompanion[Brush] with com.trueaccord.scalapb.JavaProtoSupport[Brush, netmsg.Game.WObject.Brush]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Brush] with com.trueaccord.scalapb.JavaProtoSupport[Brush, netmsg.Game.WObject.Brush]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Brush): netmsg.Game.WObject.Brush = {
      val javaPbOut = netmsg.Game.WObject.Brush.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Brush.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Brush): netmsg.game.WObject.Brush = netmsg.game.WObject.Brush(
      stats = netmsg.game.WObjectStats.Brush.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Brush = {
      val javaProtoBuilder = netmsg.Game.WObject.Brush.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Brush = netmsg.game.WObject.Brush(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Brush],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Brush", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Brush"))
    lazy val defaultInstance = netmsg.game.WObject.Brush(
      stats = netmsg.game.WObjectStats.Brush.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance
    )
    implicit class BrushLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Brush]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Brush](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Brush] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
  }
  
  final case class WarpGate(
      stats: netmsg.game.WObjectStats.WarpGate,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[WarpGate] with com.trueaccord.lenses.Updatable[WarpGate] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.WarpGate = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.WarpGate(
            stats = __stats,
            base = __base,
            owned = __owned
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.WarpGate): WarpGate = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): WarpGate = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): WarpGate = copy(owned = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.WarpGate.toJavaProto(this))
      def companion = netmsg.game.WObject.WarpGate
  }
  
  object WarpGate extends com.trueaccord.scalapb.GeneratedMessageCompanion[WarpGate] with com.trueaccord.scalapb.JavaProtoSupport[WarpGate, netmsg.Game.WObject.WarpGate]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[WarpGate] with com.trueaccord.scalapb.JavaProtoSupport[WarpGate, netmsg.Game.WObject.WarpGate]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.WarpGate): netmsg.Game.WObject.WarpGate = {
      val javaPbOut = netmsg.Game.WObject.WarpGate.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.WarpGate.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.WarpGate): netmsg.game.WObject.WarpGate = netmsg.game.WObject.WarpGate(
      stats = netmsg.game.WObjectStats.WarpGate.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.WarpGate = {
      val javaProtoBuilder = netmsg.Game.WObject.WarpGate.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.WarpGate = netmsg.game.WObject.WarpGate(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.WarpGate],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("WarpGate", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.WarpGate"))
    lazy val defaultInstance = netmsg.game.WObject.WarpGate(
      stats = netmsg.game.WObjectStats.WarpGate.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance
    )
    implicit class WarpGateLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, WarpGate]) extends com.trueaccord.lenses.ObjectLens[UpperPB, WarpGate](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.WarpGate] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
  }
  
  final case class Extractor(
      stats: netmsg.game.WObjectStats.Extractor,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Extractor] with com.trueaccord.lenses.Updatable[Extractor] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Extractor = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Extractor(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Extractor): Extractor = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Extractor = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): Extractor = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): Extractor = copy(warpable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Extractor.toJavaProto(this))
      def companion = netmsg.game.WObject.Extractor
  }
  
  object Extractor extends com.trueaccord.scalapb.GeneratedMessageCompanion[Extractor] with com.trueaccord.scalapb.JavaProtoSupport[Extractor, netmsg.Game.WObject.Extractor]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Extractor] with com.trueaccord.scalapb.JavaProtoSupport[Extractor, netmsg.Game.WObject.Extractor]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Extractor): netmsg.Game.WObject.Extractor = {
      val javaPbOut = netmsg.Game.WObject.Extractor.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Extractor.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Extractor): netmsg.game.WObject.Extractor = netmsg.game.WObject.Extractor(
      stats = netmsg.game.WObjectStats.Extractor.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Extractor = {
      val javaProtoBuilder = netmsg.Game.WObject.Extractor.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Extractor = netmsg.game.WObject.Extractor(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Extractor],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Extractor", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Extractor"))
    lazy val defaultInstance = netmsg.game.WObject.Extractor(
      stats = netmsg.game.WObjectStats.Extractor.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance
    )
    implicit class ExtractorLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Extractor]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Extractor](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Extractor] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
  }
  
  final case class WarpLinker(
      stats: netmsg.game.WObjectStats.WarpLinker,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[WarpLinker] with com.trueaccord.lenses.Updatable[WarpLinker] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.WarpLinker = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.WarpLinker(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.WarpLinker): WarpLinker = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): WarpLinker = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): WarpLinker = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): WarpLinker = copy(warpable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.WarpLinker.toJavaProto(this))
      def companion = netmsg.game.WObject.WarpLinker
  }
  
  object WarpLinker extends com.trueaccord.scalapb.GeneratedMessageCompanion[WarpLinker] with com.trueaccord.scalapb.JavaProtoSupport[WarpLinker, netmsg.Game.WObject.WarpLinker]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[WarpLinker] with com.trueaccord.scalapb.JavaProtoSupport[WarpLinker, netmsg.Game.WObject.WarpLinker]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.WarpLinker): netmsg.Game.WObject.WarpLinker = {
      val javaPbOut = netmsg.Game.WObject.WarpLinker.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.WarpLinker.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.WarpLinker): netmsg.game.WObject.WarpLinker = netmsg.game.WObject.WarpLinker(
      stats = netmsg.game.WObjectStats.WarpLinker.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.WarpLinker = {
      val javaProtoBuilder = netmsg.Game.WObject.WarpLinker.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.WarpLinker = netmsg.game.WObject.WarpLinker(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.WarpLinker],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("WarpLinker", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.WarpLinker"))
    lazy val defaultInstance = netmsg.game.WObject.WarpLinker(
      stats = netmsg.game.WObjectStats.WarpLinker.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance
    )
    implicit class WarpLinkerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, WarpLinker]) extends com.trueaccord.lenses.ObjectLens[UpperPB, WarpLinker](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.WarpLinker] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
  }
  
  final case class Spawner(
      stats: netmsg.game.WObjectStats.Spawner,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Spawner] with com.trueaccord.lenses.Updatable[Spawner] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Spawner = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Spawner(
            stats = __stats,
            base = __base,
            owned = __owned
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Spawner): Spawner = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Spawner = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): Spawner = copy(owned = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Spawner.toJavaProto(this))
      def companion = netmsg.game.WObject.Spawner
  }
  
  object Spawner extends com.trueaccord.scalapb.GeneratedMessageCompanion[Spawner] with com.trueaccord.scalapb.JavaProtoSupport[Spawner, netmsg.Game.WObject.Spawner]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Spawner] with com.trueaccord.scalapb.JavaProtoSupport[Spawner, netmsg.Game.WObject.Spawner]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Spawner): netmsg.Game.WObject.Spawner = {
      val javaPbOut = netmsg.Game.WObject.Spawner.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Spawner.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Spawner): netmsg.game.WObject.Spawner = netmsg.game.WObject.Spawner(
      stats = netmsg.game.WObjectStats.Spawner.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Spawner = {
      val javaProtoBuilder = netmsg.Game.WObject.Spawner.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Spawner = netmsg.game.WObject.Spawner(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Spawner],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Spawner", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Spawner"))
    lazy val defaultInstance = netmsg.game.WObject.Spawner(
      stats = netmsg.game.WObjectStats.Spawner.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance
    )
    implicit class SpawnerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Spawner]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Spawner](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Spawner] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
  }
  
  final case class LaserTower(
      stats: netmsg.game.WObjectStats.LaserTower,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      fighter: netmsg.game.WObject.Fighter
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[LaserTower] with com.trueaccord.lenses.Updatable[LaserTower] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fighter.serializedSize) + fighter.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(5, 2)
        output.writeRawVarint32(fighter.serializedSize)
        fighter.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.LaserTower = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __fighter = this.fighter
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 42 =>
              __fighter = com.trueaccord.scalapb.LiteParser.readMessage(__input, __fighter)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.LaserTower(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            fighter = __fighter
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.LaserTower): LaserTower = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): LaserTower = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): LaserTower = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): LaserTower = copy(warpable = __v)
      def withFighter(__v: netmsg.game.WObject.Fighter): LaserTower = copy(fighter = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 5 => fighter
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.LaserTower.toJavaProto(this))
      def companion = netmsg.game.WObject.LaserTower
  }
  
  object LaserTower extends com.trueaccord.scalapb.GeneratedMessageCompanion[LaserTower] with com.trueaccord.scalapb.JavaProtoSupport[LaserTower, netmsg.Game.WObject.LaserTower]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[LaserTower] with com.trueaccord.scalapb.JavaProtoSupport[LaserTower, netmsg.Game.WObject.LaserTower]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.LaserTower): netmsg.Game.WObject.LaserTower = {
      val javaPbOut = netmsg.Game.WObject.LaserTower.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.LaserTower.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setFighter(netmsg.game.WObject.Fighter.toJavaProto(scalaPbSource.fighter))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.LaserTower): netmsg.game.WObject.LaserTower = netmsg.game.WObject.LaserTower(
      stats = netmsg.game.WObjectStats.LaserTower.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      fighter = netmsg.game.WObject.Fighter.fromJavaProto(javaPbSource.getFighter)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.LaserTower = {
      val javaProtoBuilder = netmsg.Game.WObject.LaserTower.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.LaserTower = netmsg.game.WObject.LaserTower(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.LaserTower],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      fighter = fieldsMap(5).asInstanceOf[netmsg.game.WObject.Fighter]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("LaserTower", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.LaserTower"))
    lazy val defaultInstance = netmsg.game.WObject.LaserTower(
      stats = netmsg.game.WObjectStats.LaserTower.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      fighter = netmsg.game.WObject.Fighter.defaultInstance
    )
    implicit class LaserTowerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, LaserTower]) extends com.trueaccord.lenses.ObjectLens[UpperPB, LaserTower](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.LaserTower] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def fighter: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fighter] = field(_.fighter)((c_, f_) => c_.copy(fighter = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val FIGHTER_FIELD_NUMBER = 5
  }
  
  final case class Corvette(
      stats: netmsg.game.WObjectStats.Corvette,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      fighter: netmsg.game.WObject.Fighter,
      movable: netmsg.game.WObject.Movable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Corvette] with com.trueaccord.lenses.Updatable[Corvette] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fighter.serializedSize) + fighter.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(movable.serializedSize) + movable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(5, 2)
        output.writeRawVarint32(fighter.serializedSize)
        fighter.writeTo(output)
        output.writeTag(6, 2)
        output.writeRawVarint32(movable.serializedSize)
        movable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Corvette = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __fighter = this.fighter
        var __movable = this.movable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 42 =>
              __fighter = com.trueaccord.scalapb.LiteParser.readMessage(__input, __fighter)
            case 50 =>
              __movable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __movable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Corvette(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            fighter = __fighter,
            movable = __movable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Corvette): Corvette = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Corvette = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): Corvette = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): Corvette = copy(warpable = __v)
      def withFighter(__v: netmsg.game.WObject.Fighter): Corvette = copy(fighter = __v)
      def withMovable(__v: netmsg.game.WObject.Movable): Corvette = copy(movable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 5 => fighter
          case 6 => movable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Corvette.toJavaProto(this))
      def companion = netmsg.game.WObject.Corvette
  }
  
  object Corvette extends com.trueaccord.scalapb.GeneratedMessageCompanion[Corvette] with com.trueaccord.scalapb.JavaProtoSupport[Corvette, netmsg.Game.WObject.Corvette]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Corvette] with com.trueaccord.scalapb.JavaProtoSupport[Corvette, netmsg.Game.WObject.Corvette]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Corvette): netmsg.Game.WObject.Corvette = {
      val javaPbOut = netmsg.Game.WObject.Corvette.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Corvette.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setFighter(netmsg.game.WObject.Fighter.toJavaProto(scalaPbSource.fighter))
      javaPbOut.setMovable(netmsg.game.WObject.Movable.toJavaProto(scalaPbSource.movable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Corvette): netmsg.game.WObject.Corvette = netmsg.game.WObject.Corvette(
      stats = netmsg.game.WObjectStats.Corvette.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      fighter = netmsg.game.WObject.Fighter.fromJavaProto(javaPbSource.getFighter),
      movable = netmsg.game.WObject.Movable.fromJavaProto(javaPbSource.getMovable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Corvette = {
      val javaProtoBuilder = netmsg.Game.WObject.Corvette.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Corvette = netmsg.game.WObject.Corvette(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Corvette],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      fighter = fieldsMap(5).asInstanceOf[netmsg.game.WObject.Fighter],
      movable = fieldsMap(6).asInstanceOf[netmsg.game.WObject.Movable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Corvette", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Corvette"))
    lazy val defaultInstance = netmsg.game.WObject.Corvette(
      stats = netmsg.game.WObjectStats.Corvette.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      fighter = netmsg.game.WObject.Fighter.defaultInstance,
      movable = netmsg.game.WObject.Movable.defaultInstance
    )
    implicit class CorvetteLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Corvette]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Corvette](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Corvette] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def fighter: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fighter] = field(_.fighter)((c_, f_) => c_.copy(fighter = f_))
      def movable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Movable] = field(_.movable)((c_, f_) => c_.copy(movable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val FIGHTER_FIELD_NUMBER = 5
    final val MOVABLE_FIELD_NUMBER = 6
  }
  
  final case class Wasp(
      stats: netmsg.game.WObjectStats.Wasp,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      fighter: netmsg.game.WObject.Fighter,
      movable: netmsg.game.WObject.Movable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Wasp] with com.trueaccord.lenses.Updatable[Wasp] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fighter.serializedSize) + fighter.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(movable.serializedSize) + movable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(5, 2)
        output.writeRawVarint32(fighter.serializedSize)
        fighter.writeTo(output)
        output.writeTag(6, 2)
        output.writeRawVarint32(movable.serializedSize)
        movable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Wasp = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __fighter = this.fighter
        var __movable = this.movable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 42 =>
              __fighter = com.trueaccord.scalapb.LiteParser.readMessage(__input, __fighter)
            case 50 =>
              __movable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __movable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Wasp(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            fighter = __fighter,
            movable = __movable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Wasp): Wasp = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Wasp = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): Wasp = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): Wasp = copy(warpable = __v)
      def withFighter(__v: netmsg.game.WObject.Fighter): Wasp = copy(fighter = __v)
      def withMovable(__v: netmsg.game.WObject.Movable): Wasp = copy(movable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 5 => fighter
          case 6 => movable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Wasp.toJavaProto(this))
      def companion = netmsg.game.WObject.Wasp
  }
  
  object Wasp extends com.trueaccord.scalapb.GeneratedMessageCompanion[Wasp] with com.trueaccord.scalapb.JavaProtoSupport[Wasp, netmsg.Game.WObject.Wasp]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Wasp] with com.trueaccord.scalapb.JavaProtoSupport[Wasp, netmsg.Game.WObject.Wasp]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Wasp): netmsg.Game.WObject.Wasp = {
      val javaPbOut = netmsg.Game.WObject.Wasp.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Wasp.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setFighter(netmsg.game.WObject.Fighter.toJavaProto(scalaPbSource.fighter))
      javaPbOut.setMovable(netmsg.game.WObject.Movable.toJavaProto(scalaPbSource.movable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Wasp): netmsg.game.WObject.Wasp = netmsg.game.WObject.Wasp(
      stats = netmsg.game.WObjectStats.Wasp.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      fighter = netmsg.game.WObject.Fighter.fromJavaProto(javaPbSource.getFighter),
      movable = netmsg.game.WObject.Movable.fromJavaProto(javaPbSource.getMovable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Wasp = {
      val javaProtoBuilder = netmsg.Game.WObject.Wasp.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Wasp = netmsg.game.WObject.Wasp(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Wasp],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      fighter = fieldsMap(5).asInstanceOf[netmsg.game.WObject.Fighter],
      movable = fieldsMap(6).asInstanceOf[netmsg.game.WObject.Movable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Wasp", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Wasp"))
    lazy val defaultInstance = netmsg.game.WObject.Wasp(
      stats = netmsg.game.WObjectStats.Wasp.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      fighter = netmsg.game.WObject.Fighter.defaultInstance,
      movable = netmsg.game.WObject.Movable.defaultInstance
    )
    implicit class WaspLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Wasp]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Wasp](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Wasp] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def fighter: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fighter] = field(_.fighter)((c_, f_) => c_.copy(fighter = f_))
      def movable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Movable] = field(_.movable)((c_, f_) => c_.copy(movable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val FIGHTER_FIELD_NUMBER = 5
    final val MOVABLE_FIELD_NUMBER = 6
  }
  
  final case class Scout(
      stats: netmsg.game.WObjectStats.Scout,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      movable: netmsg.game.WObject.Movable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Scout] with com.trueaccord.lenses.Updatable[Scout] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(movable.serializedSize) + movable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(6, 2)
        output.writeRawVarint32(movable.serializedSize)
        movable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Scout = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __movable = this.movable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 50 =>
              __movable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __movable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Scout(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            movable = __movable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Scout): Scout = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Scout = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): Scout = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): Scout = copy(warpable = __v)
      def withMovable(__v: netmsg.game.WObject.Movable): Scout = copy(movable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 6 => movable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Scout.toJavaProto(this))
      def companion = netmsg.game.WObject.Scout
  }
  
  object Scout extends com.trueaccord.scalapb.GeneratedMessageCompanion[Scout] with com.trueaccord.scalapb.JavaProtoSupport[Scout, netmsg.Game.WObject.Scout]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Scout] with com.trueaccord.scalapb.JavaProtoSupport[Scout, netmsg.Game.WObject.Scout]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Scout): netmsg.Game.WObject.Scout = {
      val javaPbOut = netmsg.Game.WObject.Scout.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Scout.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setMovable(netmsg.game.WObject.Movable.toJavaProto(scalaPbSource.movable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Scout): netmsg.game.WObject.Scout = netmsg.game.WObject.Scout(
      stats = netmsg.game.WObjectStats.Scout.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      movable = netmsg.game.WObject.Movable.fromJavaProto(javaPbSource.getMovable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Scout = {
      val javaProtoBuilder = netmsg.Game.WObject.Scout.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Scout = netmsg.game.WObject.Scout(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Scout],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      movable = fieldsMap(6).asInstanceOf[netmsg.game.WObject.Movable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Scout", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Scout"))
    lazy val defaultInstance = netmsg.game.WObject.Scout(
      stats = netmsg.game.WObjectStats.Scout.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      movable = netmsg.game.WObject.Movable.defaultInstance
    )
    implicit class ScoutLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Scout]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Scout](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Scout] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def movable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Movable] = field(_.movable)((c_, f_) => c_.copy(movable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val MOVABLE_FIELD_NUMBER = 6
  }
  
  final case class RayShip(
      stats: netmsg.game.WObjectStats.RayShip,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      fighter: netmsg.game.WObject.Fighter,
      movable: netmsg.game.WObject.Movable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RayShip] with com.trueaccord.lenses.Updatable[RayShip] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fighter.serializedSize) + fighter.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(movable.serializedSize) + movable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(5, 2)
        output.writeRawVarint32(fighter.serializedSize)
        fighter.writeTo(output)
        output.writeTag(6, 2)
        output.writeRawVarint32(movable.serializedSize)
        movable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.RayShip = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __fighter = this.fighter
        var __movable = this.movable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 42 =>
              __fighter = com.trueaccord.scalapb.LiteParser.readMessage(__input, __fighter)
            case 50 =>
              __movable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __movable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.RayShip(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            fighter = __fighter,
            movable = __movable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.RayShip): RayShip = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): RayShip = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): RayShip = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): RayShip = copy(warpable = __v)
      def withFighter(__v: netmsg.game.WObject.Fighter): RayShip = copy(fighter = __v)
      def withMovable(__v: netmsg.game.WObject.Movable): RayShip = copy(movable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 5 => fighter
          case 6 => movable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.RayShip.toJavaProto(this))
      def companion = netmsg.game.WObject.RayShip
  }
  
  object RayShip extends com.trueaccord.scalapb.GeneratedMessageCompanion[RayShip] with com.trueaccord.scalapb.JavaProtoSupport[RayShip, netmsg.Game.WObject.RayShip]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[RayShip] with com.trueaccord.scalapb.JavaProtoSupport[RayShip, netmsg.Game.WObject.RayShip]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.RayShip): netmsg.Game.WObject.RayShip = {
      val javaPbOut = netmsg.Game.WObject.RayShip.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.RayShip.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setFighter(netmsg.game.WObject.Fighter.toJavaProto(scalaPbSource.fighter))
      javaPbOut.setMovable(netmsg.game.WObject.Movable.toJavaProto(scalaPbSource.movable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.RayShip): netmsg.game.WObject.RayShip = netmsg.game.WObject.RayShip(
      stats = netmsg.game.WObjectStats.RayShip.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      fighter = netmsg.game.WObject.Fighter.fromJavaProto(javaPbSource.getFighter),
      movable = netmsg.game.WObject.Movable.fromJavaProto(javaPbSource.getMovable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.RayShip = {
      val javaProtoBuilder = netmsg.Game.WObject.RayShip.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.RayShip = netmsg.game.WObject.RayShip(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.RayShip],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      fighter = fieldsMap(5).asInstanceOf[netmsg.game.WObject.Fighter],
      movable = fieldsMap(6).asInstanceOf[netmsg.game.WObject.Movable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("RayShip", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.RayShip"))
    lazy val defaultInstance = netmsg.game.WObject.RayShip(
      stats = netmsg.game.WObjectStats.RayShip.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      fighter = netmsg.game.WObject.Fighter.defaultInstance,
      movable = netmsg.game.WObject.Movable.defaultInstance
    )
    implicit class RayShipLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, RayShip]) extends com.trueaccord.lenses.ObjectLens[UpperPB, RayShip](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.RayShip] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def fighter: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fighter] = field(_.fighter)((c_, f_) => c_.copy(fighter = f_))
      def movable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Movable] = field(_.movable)((c_, f_) => c_.copy(movable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val FIGHTER_FIELD_NUMBER = 5
    final val MOVABLE_FIELD_NUMBER = 6
  }
  
  final case class RocketFrigate(
      stats: netmsg.game.WObjectStats.RocketFrigate,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      fighter: netmsg.game.WObject.Fighter,
      movable: netmsg.game.WObject.Movable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RocketFrigate] with com.trueaccord.lenses.Updatable[RocketFrigate] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fighter.serializedSize) + fighter.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(movable.serializedSize) + movable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(5, 2)
        output.writeRawVarint32(fighter.serializedSize)
        fighter.writeTo(output)
        output.writeTag(6, 2)
        output.writeRawVarint32(movable.serializedSize)
        movable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.RocketFrigate = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __fighter = this.fighter
        var __movable = this.movable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 42 =>
              __fighter = com.trueaccord.scalapb.LiteParser.readMessage(__input, __fighter)
            case 50 =>
              __movable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __movable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.RocketFrigate(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            fighter = __fighter,
            movable = __movable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.RocketFrigate): RocketFrigate = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): RocketFrigate = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): RocketFrigate = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): RocketFrigate = copy(warpable = __v)
      def withFighter(__v: netmsg.game.WObject.Fighter): RocketFrigate = copy(fighter = __v)
      def withMovable(__v: netmsg.game.WObject.Movable): RocketFrigate = copy(movable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 5 => fighter
          case 6 => movable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.RocketFrigate.toJavaProto(this))
      def companion = netmsg.game.WObject.RocketFrigate
  }
  
  object RocketFrigate extends com.trueaccord.scalapb.GeneratedMessageCompanion[RocketFrigate] with com.trueaccord.scalapb.JavaProtoSupport[RocketFrigate, netmsg.Game.WObject.RocketFrigate]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[RocketFrigate] with com.trueaccord.scalapb.JavaProtoSupport[RocketFrigate, netmsg.Game.WObject.RocketFrigate]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.RocketFrigate): netmsg.Game.WObject.RocketFrigate = {
      val javaPbOut = netmsg.Game.WObject.RocketFrigate.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.RocketFrigate.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setFighter(netmsg.game.WObject.Fighter.toJavaProto(scalaPbSource.fighter))
      javaPbOut.setMovable(netmsg.game.WObject.Movable.toJavaProto(scalaPbSource.movable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.RocketFrigate): netmsg.game.WObject.RocketFrigate = netmsg.game.WObject.RocketFrigate(
      stats = netmsg.game.WObjectStats.RocketFrigate.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      fighter = netmsg.game.WObject.Fighter.fromJavaProto(javaPbSource.getFighter),
      movable = netmsg.game.WObject.Movable.fromJavaProto(javaPbSource.getMovable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.RocketFrigate = {
      val javaProtoBuilder = netmsg.Game.WObject.RocketFrigate.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.RocketFrigate = netmsg.game.WObject.RocketFrigate(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.RocketFrigate],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      fighter = fieldsMap(5).asInstanceOf[netmsg.game.WObject.Fighter],
      movable = fieldsMap(6).asInstanceOf[netmsg.game.WObject.Movable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("RocketFrigate", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.RocketFrigate"))
    lazy val defaultInstance = netmsg.game.WObject.RocketFrigate(
      stats = netmsg.game.WObjectStats.RocketFrigate.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      fighter = netmsg.game.WObject.Fighter.defaultInstance,
      movable = netmsg.game.WObject.Movable.defaultInstance
    )
    implicit class RocketFrigateLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, RocketFrigate]) extends com.trueaccord.lenses.ObjectLens[UpperPB, RocketFrigate](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.RocketFrigate] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def fighter: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fighter] = field(_.fighter)((c_, f_) => c_.copy(fighter = f_))
      def movable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Movable] = field(_.movable)((c_, f_) => c_.copy(movable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val FIGHTER_FIELD_NUMBER = 5
    final val MOVABLE_FIELD_NUMBER = 6
  }
  
  final case class Gunship(
      stats: netmsg.game.WObjectStats.Gunship,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      fighter: netmsg.game.WObject.Fighter,
      movable: netmsg.game.WObject.Movable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Gunship] with com.trueaccord.lenses.Updatable[Gunship] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fighter.serializedSize) + fighter.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(movable.serializedSize) + movable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(5, 2)
        output.writeRawVarint32(fighter.serializedSize)
        fighter.writeTo(output)
        output.writeTag(6, 2)
        output.writeRawVarint32(movable.serializedSize)
        movable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Gunship = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __fighter = this.fighter
        var __movable = this.movable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 42 =>
              __fighter = com.trueaccord.scalapb.LiteParser.readMessage(__input, __fighter)
            case 50 =>
              __movable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __movable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Gunship(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            fighter = __fighter,
            movable = __movable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Gunship): Gunship = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Gunship = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): Gunship = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): Gunship = copy(warpable = __v)
      def withFighter(__v: netmsg.game.WObject.Fighter): Gunship = copy(fighter = __v)
      def withMovable(__v: netmsg.game.WObject.Movable): Gunship = copy(movable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 5 => fighter
          case 6 => movable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Gunship.toJavaProto(this))
      def companion = netmsg.game.WObject.Gunship
  }
  
  object Gunship extends com.trueaccord.scalapb.GeneratedMessageCompanion[Gunship] with com.trueaccord.scalapb.JavaProtoSupport[Gunship, netmsg.Game.WObject.Gunship]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Gunship] with com.trueaccord.scalapb.JavaProtoSupport[Gunship, netmsg.Game.WObject.Gunship]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Gunship): netmsg.Game.WObject.Gunship = {
      val javaPbOut = netmsg.Game.WObject.Gunship.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Gunship.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setFighter(netmsg.game.WObject.Fighter.toJavaProto(scalaPbSource.fighter))
      javaPbOut.setMovable(netmsg.game.WObject.Movable.toJavaProto(scalaPbSource.movable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Gunship): netmsg.game.WObject.Gunship = netmsg.game.WObject.Gunship(
      stats = netmsg.game.WObjectStats.Gunship.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      fighter = netmsg.game.WObject.Fighter.fromJavaProto(javaPbSource.getFighter),
      movable = netmsg.game.WObject.Movable.fromJavaProto(javaPbSource.getMovable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Gunship = {
      val javaProtoBuilder = netmsg.Game.WObject.Gunship.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Gunship = netmsg.game.WObject.Gunship(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Gunship],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      fighter = fieldsMap(5).asInstanceOf[netmsg.game.WObject.Fighter],
      movable = fieldsMap(6).asInstanceOf[netmsg.game.WObject.Movable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Gunship", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Gunship"))
    lazy val defaultInstance = netmsg.game.WObject.Gunship(
      stats = netmsg.game.WObjectStats.Gunship.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      fighter = netmsg.game.WObject.Fighter.defaultInstance,
      movable = netmsg.game.WObject.Movable.defaultInstance
    )
    implicit class GunshipLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Gunship]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Gunship](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Gunship] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def fighter: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fighter] = field(_.fighter)((c_, f_) => c_.copy(fighter = f_))
      def movable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Movable] = field(_.movable)((c_, f_) => c_.copy(movable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val FIGHTER_FIELD_NUMBER = 5
    final val MOVABLE_FIELD_NUMBER = 6
  }
  
  final case class Fortress(
      stats: netmsg.game.WObjectStats.Fortress,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj,
      warpable: netmsg.game.WObject.Warpable,
      fighter: netmsg.game.WObject.Fighter,
      movable: netmsg.game.WObject.Movable
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Fortress] with com.trueaccord.lenses.Updatable[Fortress] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpable.serializedSize) + warpable.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fighter.serializedSize) + fighter.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(movable.serializedSize) + movable.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
        output.writeTag(4, 2)
        output.writeRawVarint32(warpable.serializedSize)
        warpable.writeTo(output)
        output.writeTag(5, 2)
        output.writeRawVarint32(fighter.serializedSize)
        fighter.writeTo(output)
        output.writeTag(6, 2)
        output.writeRawVarint32(movable.serializedSize)
        movable.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.Fortress = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var __warpable = this.warpable
        var __fighter = this.fighter
        var __movable = this.movable
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case 34 =>
              __warpable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpable)
            case 42 =>
              __fighter = com.trueaccord.scalapb.LiteParser.readMessage(__input, __fighter)
            case 50 =>
              __movable = com.trueaccord.scalapb.LiteParser.readMessage(__input, __movable)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.Fortress(
            stats = __stats,
            base = __base,
            owned = __owned,
            warpable = __warpable,
            fighter = __fighter,
            movable = __movable
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.Fortress): Fortress = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): Fortress = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): Fortress = copy(owned = __v)
      def withWarpable(__v: netmsg.game.WObject.Warpable): Fortress = copy(warpable = __v)
      def withFighter(__v: netmsg.game.WObject.Fighter): Fortress = copy(fighter = __v)
      def withMovable(__v: netmsg.game.WObject.Movable): Fortress = copy(movable = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
          case 4 => warpable
          case 5 => fighter
          case 6 => movable
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.Fortress.toJavaProto(this))
      def companion = netmsg.game.WObject.Fortress
  }
  
  object Fortress extends com.trueaccord.scalapb.GeneratedMessageCompanion[Fortress] with com.trueaccord.scalapb.JavaProtoSupport[Fortress, netmsg.Game.WObject.Fortress]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Fortress] with com.trueaccord.scalapb.JavaProtoSupport[Fortress, netmsg.Game.WObject.Fortress]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.Fortress): netmsg.Game.WObject.Fortress = {
      val javaPbOut = netmsg.Game.WObject.Fortress.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.Fortress.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.setWarpable(netmsg.game.WObject.Warpable.toJavaProto(scalaPbSource.warpable))
      javaPbOut.setFighter(netmsg.game.WObject.Fighter.toJavaProto(scalaPbSource.fighter))
      javaPbOut.setMovable(netmsg.game.WObject.Movable.toJavaProto(scalaPbSource.movable))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.Fortress): netmsg.game.WObject.Fortress = netmsg.game.WObject.Fortress(
      stats = netmsg.game.WObjectStats.Fortress.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned),
      warpable = netmsg.game.WObject.Warpable.fromJavaProto(javaPbSource.getWarpable),
      fighter = netmsg.game.WObject.Fighter.fromJavaProto(javaPbSource.getFighter),
      movable = netmsg.game.WObject.Movable.fromJavaProto(javaPbSource.getMovable)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.Fortress = {
      val javaProtoBuilder = netmsg.Game.WObject.Fortress.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.Fortress = netmsg.game.WObject.Fortress(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.Fortress],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj],
      warpable = fieldsMap(4).asInstanceOf[netmsg.game.WObject.Warpable],
      fighter = fieldsMap(5).asInstanceOf[netmsg.game.WObject.Fighter],
      movable = fieldsMap(6).asInstanceOf[netmsg.game.WObject.Movable]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Fortress", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.Fortress"))
    lazy val defaultInstance = netmsg.game.WObject.Fortress(
      stats = netmsg.game.WObjectStats.Fortress.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance,
      warpable = netmsg.game.WObject.Warpable.defaultInstance,
      fighter = netmsg.game.WObject.Fighter.defaultInstance,
      movable = netmsg.game.WObject.Movable.defaultInstance
    )
    implicit class FortressLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Fortress]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Fortress](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.Fortress] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
      def warpable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Warpable] = field(_.warpable)((c_, f_) => c_.copy(warpable = f_))
      def fighter: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fighter] = field(_.fighter)((c_, f_) => c_.copy(fighter = f_))
      def movable: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Movable] = field(_.movable)((c_, f_) => c_.copy(movable = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
    final val WARPABLE_FIELD_NUMBER = 4
    final val FIGHTER_FIELD_NUMBER = 5
    final val MOVABLE_FIELD_NUMBER = 6
  }
  
  final case class VpTower(
      stats: netmsg.game.WObjectStats.VpTower,
      base: netmsg.game.WObject.Base,
      owned: netmsg.game.WObject.OwnedObj
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[VpTower] with com.trueaccord.lenses.Updatable[VpTower] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(stats.serializedSize) + stats.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(base.serializedSize) + base.serializedSize
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(owned.serializedSize) + owned.serializedSize
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeTag(1, 2)
        output.writeRawVarint32(stats.serializedSize)
        stats.writeTo(output)
        output.writeTag(2, 2)
        output.writeRawVarint32(base.serializedSize)
        base.writeTo(output)
        output.writeTag(3, 2)
        output.writeRawVarint32(owned.serializedSize)
        owned.writeTo(output)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.WObject.VpTower = {
        var __stats = this.stats
        var __base = this.base
        var __owned = this.owned
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __stats)
            case 18 =>
              __base = com.trueaccord.scalapb.LiteParser.readMessage(__input, __base)
            case 26 =>
              __owned = com.trueaccord.scalapb.LiteParser.readMessage(__input, __owned)
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.WObject.VpTower(
            stats = __stats,
            base = __base,
            owned = __owned
        )
      }
      def withStats(__v: netmsg.game.WObjectStats.VpTower): VpTower = copy(stats = __v)
      def withBase(__v: netmsg.game.WObject.Base): VpTower = copy(base = __v)
      def withOwned(__v: netmsg.game.WObject.OwnedObj): VpTower = copy(owned = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => stats
          case 2 => base
          case 3 => owned
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.WObject.VpTower.toJavaProto(this))
      def companion = netmsg.game.WObject.VpTower
  }
  
  object VpTower extends com.trueaccord.scalapb.GeneratedMessageCompanion[VpTower] with com.trueaccord.scalapb.JavaProtoSupport[VpTower, netmsg.Game.WObject.VpTower]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[VpTower] with com.trueaccord.scalapb.JavaProtoSupport[VpTower, netmsg.Game.WObject.VpTower]  = this
    def toJavaProto(scalaPbSource: netmsg.game.WObject.VpTower): netmsg.Game.WObject.VpTower = {
      val javaPbOut = netmsg.Game.WObject.VpTower.newBuilder
      javaPbOut.setStats(netmsg.game.WObjectStats.VpTower.toJavaProto(scalaPbSource.stats))
      javaPbOut.setBase(netmsg.game.WObject.Base.toJavaProto(scalaPbSource.base))
      javaPbOut.setOwned(netmsg.game.WObject.OwnedObj.toJavaProto(scalaPbSource.owned))
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Game.WObject.VpTower): netmsg.game.WObject.VpTower = netmsg.game.WObject.VpTower(
      stats = netmsg.game.WObjectStats.VpTower.fromJavaProto(javaPbSource.getStats),
      base = netmsg.game.WObject.Base.fromJavaProto(javaPbSource.getBase),
      owned = netmsg.game.WObject.OwnedObj.fromJavaProto(javaPbSource.getOwned)
    )
    override def fromAscii(ascii: String): netmsg.game.WObject.VpTower = {
      val javaProtoBuilder = netmsg.Game.WObject.VpTower.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.WObject.VpTower = netmsg.game.WObject.VpTower(
      stats = fieldsMap(1).asInstanceOf[netmsg.game.WObjectStats.VpTower],
      base = fieldsMap(2).asInstanceOf[netmsg.game.WObject.Base],
      owned = fieldsMap(3).asInstanceOf[netmsg.game.WObject.OwnedObj]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("VpTower", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.WObject.VpTower"))
    lazy val defaultInstance = netmsg.game.WObject.VpTower(
      stats = netmsg.game.WObjectStats.VpTower.defaultInstance,
      base = netmsg.game.WObject.Base.defaultInstance,
      owned = netmsg.game.WObject.OwnedObj.defaultInstance
    )
    implicit class VpTowerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, VpTower]) extends com.trueaccord.lenses.ObjectLens[UpperPB, VpTower](_l) {
      def stats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjectStats.VpTower] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
      def base: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Base] = field(_.base)((c_, f_) => c_.copy(base = f_))
      def owned: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.OwnedObj] = field(_.owned)((c_, f_) => c_.copy(owned = f_))
    }
    final val STATS_FIELD_NUMBER = 1
    final val BASE_FIELD_NUMBER = 2
    final val OWNED_FIELD_NUMBER = 3
  }
  
  implicit class WObjectLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, WObject]) extends com.trueaccord.lenses.ObjectLens[UpperPB, WObject](_l) {
    def asteroid: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Asteroid] = field(_.getAsteroid)((c_, f_) => c_.copy(asteroid = Some(f_)))
    def optionalAsteroid: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Asteroid]] = field(_.asteroid)((c_, f_) => c_.copy(asteroid = f_))
    def rock: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Rock] = field(_.getRock)((c_, f_) => c_.copy(rock = Some(f_)))
    def optionalRock: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Rock]] = field(_.rock)((c_, f_) => c_.copy(rock = f_))
    def crystal: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Crystal] = field(_.getCrystal)((c_, f_) => c_.copy(crystal = Some(f_)))
    def optionalCrystal: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Crystal]] = field(_.crystal)((c_, f_) => c_.copy(crystal = f_))
    def brush: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Brush] = field(_.getBrush)((c_, f_) => c_.copy(brush = Some(f_)))
    def optionalBrush: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Brush]] = field(_.brush)((c_, f_) => c_.copy(brush = f_))
    def warpGate: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.WarpGate] = field(_.getWarpGate)((c_, f_) => c_.copy(warpGate = Some(f_)))
    def optionalWarpGate: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.WarpGate]] = field(_.warpGate)((c_, f_) => c_.copy(warpGate = f_))
    def extractor: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Extractor] = field(_.getExtractor)((c_, f_) => c_.copy(extractor = Some(f_)))
    def optionalExtractor: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Extractor]] = field(_.extractor)((c_, f_) => c_.copy(extractor = f_))
    def warpLinker: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.WarpLinker] = field(_.getWarpLinker)((c_, f_) => c_.copy(warpLinker = Some(f_)))
    def optionalWarpLinker: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.WarpLinker]] = field(_.warpLinker)((c_, f_) => c_.copy(warpLinker = f_))
    def spawner: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Spawner] = field(_.getSpawner)((c_, f_) => c_.copy(spawner = Some(f_)))
    def optionalSpawner: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Spawner]] = field(_.spawner)((c_, f_) => c_.copy(spawner = f_))
    def laserTower: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.LaserTower] = field(_.getLaserTower)((c_, f_) => c_.copy(laserTower = Some(f_)))
    def optionalLaserTower: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.LaserTower]] = field(_.laserTower)((c_, f_) => c_.copy(laserTower = f_))
    def corvette: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Corvette] = field(_.getCorvette)((c_, f_) => c_.copy(corvette = Some(f_)))
    def optionalCorvette: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Corvette]] = field(_.corvette)((c_, f_) => c_.copy(corvette = f_))
    def wasp: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Wasp] = field(_.getWasp)((c_, f_) => c_.copy(wasp = Some(f_)))
    def optionalWasp: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Wasp]] = field(_.wasp)((c_, f_) => c_.copy(wasp = f_))
    def scout: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Scout] = field(_.getScout)((c_, f_) => c_.copy(scout = Some(f_)))
    def optionalScout: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Scout]] = field(_.scout)((c_, f_) => c_.copy(scout = f_))
    def rayShip: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.RayShip] = field(_.getRayShip)((c_, f_) => c_.copy(rayShip = Some(f_)))
    def optionalRayShip: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.RayShip]] = field(_.rayShip)((c_, f_) => c_.copy(rayShip = f_))
    def rocketFrigate: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.RocketFrigate] = field(_.getRocketFrigate)((c_, f_) => c_.copy(rocketFrigate = Some(f_)))
    def optionalRocketFrigate: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.RocketFrigate]] = field(_.rocketFrigate)((c_, f_) => c_.copy(rocketFrigate = f_))
    def gunship: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Gunship] = field(_.getGunship)((c_, f_) => c_.copy(gunship = Some(f_)))
    def optionalGunship: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Gunship]] = field(_.gunship)((c_, f_) => c_.copy(gunship = f_))
    def fortress: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Fortress] = field(_.getFortress)((c_, f_) => c_.copy(fortress = Some(f_)))
    def optionalFortress: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.Fortress]] = field(_.fortress)((c_, f_) => c_.copy(fortress = f_))
    def vpTower: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.VpTower] = field(_.getVpTower)((c_, f_) => c_.copy(vpTower = Some(f_)))
    def optionalVpTower: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.game.WObject.VpTower]] = field(_.vpTower)((c_, f_) => c_.copy(vpTower = f_))
  }
  final val ASTEROID_FIELD_NUMBER = 1
  final val ROCK_FIELD_NUMBER = 2
  final val CRYSTAL_FIELD_NUMBER = 3
  final val BRUSH_FIELD_NUMBER = 4
  final val WARP_GATE_FIELD_NUMBER = 5
  final val EXTRACTOR_FIELD_NUMBER = 6
  final val WARP_LINKER_FIELD_NUMBER = 7
  final val SPAWNER_FIELD_NUMBER = 8
  final val LASER_TOWER_FIELD_NUMBER = 9
  final val CORVETTE_FIELD_NUMBER = 10
  final val WASP_FIELD_NUMBER = 11
  final val SCOUT_FIELD_NUMBER = 12
  final val RAY_SHIP_FIELD_NUMBER = 13
  final val ROCKET_FRIGATE_FIELD_NUMBER = 14
  final val GUNSHIP_FIELD_NUMBER = 15
  final val FORTRESS_FIELD_NUMBER = 16
  final val VP_TOWER_FIELD_NUMBER = 17
}
