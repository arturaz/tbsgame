// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class Objectives(
    gatherResourcesLeft: Option[Int] = None,
    collectVpsLeft: Option[Int] = None,
    destroyAllCriticalObjectsLeft: Option[Int] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Objectives] with com.trueaccord.lenses.Updatable[Objectives] {
    lazy val serializedSize: Int = {
      var __size = 0
      if (gatherResourcesLeft.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, gatherResourcesLeft.get) }
      if (collectVpsLeft.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, collectVpsLeft.get) }
      if (destroyAllCriticalObjectsLeft.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(3, destroyAllCriticalObjectsLeft.get) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      gatherResourcesLeft.foreach { v => 
        output.writeUInt32(1, v)
      }
      collectVpsLeft.foreach { v => 
        output.writeUInt32(2, v)
      }
      destroyAllCriticalObjectsLeft.foreach { v => 
        output.writeUInt32(3, v)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.Objectives = {
      var __gatherResourcesLeft = this.gatherResourcesLeft
      var __collectVpsLeft = this.collectVpsLeft
      var __destroyAllCriticalObjectsLeft = this.destroyAllCriticalObjectsLeft
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __gatherResourcesLeft = Some(__input.readUInt32())
          case 16 =>
            __collectVpsLeft = Some(__input.readUInt32())
          case 24 =>
            __destroyAllCriticalObjectsLeft = Some(__input.readUInt32())
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.Objectives(
          gatherResourcesLeft = __gatherResourcesLeft,
          collectVpsLeft = __collectVpsLeft,
          destroyAllCriticalObjectsLeft = __destroyAllCriticalObjectsLeft
      )
    }
    def getGatherResourcesLeft: Int = gatherResourcesLeft.getOrElse(0)
    def clearGatherResourcesLeft: Objectives = copy(gatherResourcesLeft = None)
    def withGatherResourcesLeft(__v: Int): Objectives = copy(gatherResourcesLeft = Some(__v))
    def getCollectVpsLeft: Int = collectVpsLeft.getOrElse(0)
    def clearCollectVpsLeft: Objectives = copy(collectVpsLeft = None)
    def withCollectVpsLeft(__v: Int): Objectives = copy(collectVpsLeft = Some(__v))
    def getDestroyAllCriticalObjectsLeft: Int = destroyAllCriticalObjectsLeft.getOrElse(0)
    def clearDestroyAllCriticalObjectsLeft: Objectives = copy(destroyAllCriticalObjectsLeft = None)
    def withDestroyAllCriticalObjectsLeft(__v: Int): Objectives = copy(destroyAllCriticalObjectsLeft = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => gatherResourcesLeft
        case 2 => collectVpsLeft
        case 3 => destroyAllCriticalObjectsLeft
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.Objectives.toJavaProto(this))
    def companion = netmsg.game.Objectives
}

object Objectives extends com.trueaccord.scalapb.GeneratedMessageCompanion[Objectives] with com.trueaccord.scalapb.JavaProtoSupport[Objectives, netmsg.Game.Objectives]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Objectives] with com.trueaccord.scalapb.JavaProtoSupport[Objectives, netmsg.Game.Objectives]  = this
  def toJavaProto(scalaPbSource: netmsg.game.Objectives): netmsg.Game.Objectives = {
    val javaPbOut = netmsg.Game.Objectives.newBuilder
    scalaPbSource.gatherResourcesLeft.foreach(javaPbOut.setGatherResourcesLeft)
    scalaPbSource.collectVpsLeft.foreach(javaPbOut.setCollectVpsLeft)
    scalaPbSource.destroyAllCriticalObjectsLeft.foreach(javaPbOut.setDestroyAllCriticalObjectsLeft)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Game.Objectives): netmsg.game.Objectives = netmsg.game.Objectives(
    gatherResourcesLeft = if (javaPbSource.hasGatherResourcesLeft) Some(javaPbSource.getGatherResourcesLeft.intValue) else None,
    collectVpsLeft = if (javaPbSource.hasCollectVpsLeft) Some(javaPbSource.getCollectVpsLeft.intValue) else None,
    destroyAllCriticalObjectsLeft = if (javaPbSource.hasDestroyAllCriticalObjectsLeft) Some(javaPbSource.getDestroyAllCriticalObjectsLeft.intValue) else None
  )
  override def fromAscii(ascii: String): netmsg.game.Objectives = {
    val javaProtoBuilder = netmsg.Game.Objectives.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.Objectives = netmsg.game.Objectives(
    gatherResourcesLeft = fieldsMap.getOrElse(1, None).asInstanceOf[Option[Int]],
    collectVpsLeft = fieldsMap.getOrElse(2, None).asInstanceOf[Option[Int]],
    destroyAllCriticalObjectsLeft = fieldsMap.getOrElse(3, None).asInstanceOf[Option[Int]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Objectives", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.Objectives"))
  lazy val defaultInstance = netmsg.game.Objectives(
  )
  implicit class ObjectivesLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Objectives]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Objectives](_l) {
    def gatherResourcesLeft: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getGatherResourcesLeft)((c_, f_) => c_.copy(gatherResourcesLeft = Some(f_)))
    def optionalGatherResourcesLeft: com.trueaccord.lenses.Lens[UpperPB, Option[Int]] = field(_.gatherResourcesLeft)((c_, f_) => c_.copy(gatherResourcesLeft = f_))
    def collectVpsLeft: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCollectVpsLeft)((c_, f_) => c_.copy(collectVpsLeft = Some(f_)))
    def optionalCollectVpsLeft: com.trueaccord.lenses.Lens[UpperPB, Option[Int]] = field(_.collectVpsLeft)((c_, f_) => c_.copy(collectVpsLeft = f_))
    def destroyAllCriticalObjectsLeft: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getDestroyAllCriticalObjectsLeft)((c_, f_) => c_.copy(destroyAllCriticalObjectsLeft = Some(f_)))
    def optionalDestroyAllCriticalObjectsLeft: com.trueaccord.lenses.Lens[UpperPB, Option[Int]] = field(_.destroyAllCriticalObjectsLeft)((c_, f_) => c_.copy(destroyAllCriticalObjectsLeft = f_))
  }
  final val GATHER_RESOURCES_LEFT_FIELD_NUMBER = 1
  final val COLLECT_VPS_LEFT_FIELD_NUMBER = 2
  final val DESTROY_ALL_CRITICAL_OBJECTS_LEFT_FIELD_NUMBER = 3
}
