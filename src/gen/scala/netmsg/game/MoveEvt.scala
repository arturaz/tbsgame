// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class MoveEvt(
    objId: netmsg.game.WObjID,
    from: netmsg.base.Vect2,
    to: netmsg.base.Vect2,
    movesLeft: Int
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MoveEvt] with com.trueaccord.lenses.Updatable[MoveEvt] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(objId.serializedSize) + objId.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(from.serializedSize) + from.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(to.serializedSize) + to.serializedSize
      __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(4, movesLeft)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(objId.serializedSize)
      objId.writeTo(output)
      output.writeTag(2, 2)
      output.writeRawVarint32(from.serializedSize)
      from.writeTo(output)
      output.writeTag(3, 2)
      output.writeRawVarint32(to.serializedSize)
      to.writeTo(output)
      output.writeUInt32(4, movesLeft)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.MoveEvt = {
      var __objId = this.objId
      var __from = this.from
      var __to = this.to
      var __movesLeft = this.movesLeft
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __objId = com.trueaccord.scalapb.LiteParser.readMessage(__input, __objId)
          case 18 =>
            __from = com.trueaccord.scalapb.LiteParser.readMessage(__input, __from)
          case 26 =>
            __to = com.trueaccord.scalapb.LiteParser.readMessage(__input, __to)
          case 32 =>
            __movesLeft = __input.readUInt32()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.MoveEvt(
          objId = __objId,
          from = __from,
          to = __to,
          movesLeft = __movesLeft
      )
    }
    def withObjId(__v: netmsg.game.WObjID): MoveEvt = copy(objId = __v)
    def withFrom(__v: netmsg.base.Vect2): MoveEvt = copy(from = __v)
    def withTo(__v: netmsg.base.Vect2): MoveEvt = copy(to = __v)
    def withMovesLeft(__v: Int): MoveEvt = copy(movesLeft = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => objId
        case 2 => from
        case 3 => to
        case 4 => movesLeft
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.MoveEvt.toJavaProto(this))
    def companion = netmsg.game.MoveEvt
}

object MoveEvt extends com.trueaccord.scalapb.GeneratedMessageCompanion[MoveEvt] with com.trueaccord.scalapb.JavaProtoSupport[MoveEvt, netmsg.Game.MoveEvt]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[MoveEvt] with com.trueaccord.scalapb.JavaProtoSupport[MoveEvt, netmsg.Game.MoveEvt]  = this
  def toJavaProto(scalaPbSource: netmsg.game.MoveEvt): netmsg.Game.MoveEvt = {
    val javaPbOut = netmsg.Game.MoveEvt.newBuilder
    javaPbOut.setObjId(netmsg.game.WObjID.toJavaProto(scalaPbSource.objId))
    javaPbOut.setFrom(netmsg.base.Vect2.toJavaProto(scalaPbSource.from))
    javaPbOut.setTo(netmsg.base.Vect2.toJavaProto(scalaPbSource.to))
    javaPbOut.setMovesLeft(scalaPbSource.movesLeft)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Game.MoveEvt): netmsg.game.MoveEvt = netmsg.game.MoveEvt(
    objId = netmsg.game.WObjID.fromJavaProto(javaPbSource.getObjId),
    from = netmsg.base.Vect2.fromJavaProto(javaPbSource.getFrom),
    to = netmsg.base.Vect2.fromJavaProto(javaPbSource.getTo),
    movesLeft = javaPbSource.getMovesLeft.intValue
  )
  override def fromAscii(ascii: String): netmsg.game.MoveEvt = {
    val javaProtoBuilder = netmsg.Game.MoveEvt.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.MoveEvt = netmsg.game.MoveEvt(
    objId = fieldsMap(1).asInstanceOf[netmsg.game.WObjID],
    from = fieldsMap(2).asInstanceOf[netmsg.base.Vect2],
    to = fieldsMap(3).asInstanceOf[netmsg.base.Vect2],
    movesLeft = fieldsMap(4).asInstanceOf[Int]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("MoveEvt", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.MoveEvt"))
  lazy val defaultInstance = netmsg.game.MoveEvt(
    objId = netmsg.game.WObjID.defaultInstance,
    from = netmsg.base.Vect2.defaultInstance,
    to = netmsg.base.Vect2.defaultInstance,
    movesLeft = 0
  )
  implicit class MoveEvtLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, MoveEvt]) extends com.trueaccord.lenses.ObjectLens[UpperPB, MoveEvt](_l) {
    def objId: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObjID] = field(_.objId)((c_, f_) => c_.copy(objId = f_))
    def from: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Vect2] = field(_.from)((c_, f_) => c_.copy(from = f_))
    def to: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Vect2] = field(_.to)((c_, f_) => c_.copy(to = f_))
    def movesLeft: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.movesLeft)((c_, f_) => c_.copy(movesLeft = f_))
  }
  final val OBJ_ID_FIELD_NUMBER = 1
  final val FROM_FIELD_NUMBER = 2
  final val TO_FIELD_NUMBER = 3
  final val MOVES_LEFT_FIELD_NUMBER = 4
}
