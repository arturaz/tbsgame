// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game


import com.trueaccord.scalapb.Descriptors

final case class MInit(
    bounds: netmsg.base.Bounds,
    objects: Seq[netmsg.game.WObject] = Nil,
    warpZone: Seq[netmsg.base.Vect2] = Nil,
    visiblePoints: Seq[netmsg.base.Vect2] = Nil,
    selfTeam: netmsg.game.Team,
    otherTeams: Seq[netmsg.game.Team] = Nil,
    self: netmsg.game.PlayerState,
    otherPlayers: Seq[netmsg.game.InitPlayer] = Nil,
    warpableObjectStats: netmsg.game.WarpableObjectStats,
    objectives: netmsg.game.Objectives,
    turnStarted: netmsg.game.TurnStartedEvt,
    extractionSpeedRates: Seq[netmsg.game.MInit.ExtractionSpeedRate] = Nil,
    id: netmsg.game.WorldID
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MInit] with com.trueaccord.lenses.Updatable[MInit] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(bounds.serializedSize) + bounds.serializedSize
      objects.foreach(objects => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(objects.serializedSize) + objects.serializedSize)
      warpZone.foreach(warpZone => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpZone.serializedSize) + warpZone.serializedSize)
      visiblePoints.foreach(visiblePoints => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(visiblePoints.serializedSize) + visiblePoints.serializedSize)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(selfTeam.serializedSize) + selfTeam.serializedSize
      otherTeams.foreach(otherTeams => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(otherTeams.serializedSize) + otherTeams.serializedSize)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(self.serializedSize) + self.serializedSize
      otherPlayers.foreach(otherPlayers => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(otherPlayers.serializedSize) + otherPlayers.serializedSize)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(warpableObjectStats.serializedSize) + warpableObjectStats.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(objectives.serializedSize) + objectives.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(turnStarted.serializedSize) + turnStarted.serializedSize
      extractionSpeedRates.foreach(extractionSpeedRates => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(extractionSpeedRates.serializedSize) + extractionSpeedRates.serializedSize)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(id.serializedSize) + id.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(bounds.serializedSize)
      bounds.writeTo(output)
      objects.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      warpZone.foreach { v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      visiblePoints.foreach { v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      output.writeTag(5, 2)
      output.writeRawVarint32(selfTeam.serializedSize)
      selfTeam.writeTo(output)
      otherTeams.foreach { v => 
        output.writeTag(6, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      output.writeTag(7, 2)
      output.writeRawVarint32(self.serializedSize)
      self.writeTo(output)
      otherPlayers.foreach { v => 
        output.writeTag(8, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      output.writeTag(9, 2)
      output.writeRawVarint32(warpableObjectStats.serializedSize)
      warpableObjectStats.writeTo(output)
      output.writeTag(11, 2)
      output.writeRawVarint32(objectives.serializedSize)
      objectives.writeTo(output)
      output.writeTag(12, 2)
      output.writeRawVarint32(turnStarted.serializedSize)
      turnStarted.writeTo(output)
      extractionSpeedRates.foreach { v => 
        output.writeTag(13, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      output.writeTag(14, 2)
      output.writeRawVarint32(id.serializedSize)
      id.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.MInit = {
      var __bounds = this.bounds
      val __objects = (scala.collection.immutable.Vector.newBuilder[netmsg.game.WObject] ++= this.objects)
      val __warpZone = (scala.collection.immutable.Vector.newBuilder[netmsg.base.Vect2] ++= this.warpZone)
      val __visiblePoints = (scala.collection.immutable.Vector.newBuilder[netmsg.base.Vect2] ++= this.visiblePoints)
      var __selfTeam = this.selfTeam
      val __otherTeams = (scala.collection.immutable.Vector.newBuilder[netmsg.game.Team] ++= this.otherTeams)
      var __self = this.self
      val __otherPlayers = (scala.collection.immutable.Vector.newBuilder[netmsg.game.InitPlayer] ++= this.otherPlayers)
      var __warpableObjectStats = this.warpableObjectStats
      var __objectives = this.objectives
      var __turnStarted = this.turnStarted
      val __extractionSpeedRates = (scala.collection.immutable.Vector.newBuilder[netmsg.game.MInit.ExtractionSpeedRate] ++= this.extractionSpeedRates)
      var __id = this.id
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __bounds = com.trueaccord.scalapb.LiteParser.readMessage(__input, __bounds)
          case 18 =>
            __objects += com.trueaccord.scalapb.LiteParser.readMessage(__input, netmsg.game.WObject.defaultInstance)
          case 26 =>
            __warpZone += com.trueaccord.scalapb.LiteParser.readMessage(__input, netmsg.base.Vect2.defaultInstance)
          case 34 =>
            __visiblePoints += com.trueaccord.scalapb.LiteParser.readMessage(__input, netmsg.base.Vect2.defaultInstance)
          case 42 =>
            __selfTeam = com.trueaccord.scalapb.LiteParser.readMessage(__input, __selfTeam)
          case 50 =>
            __otherTeams += com.trueaccord.scalapb.LiteParser.readMessage(__input, netmsg.game.Team.defaultInstance)
          case 58 =>
            __self = com.trueaccord.scalapb.LiteParser.readMessage(__input, __self)
          case 66 =>
            __otherPlayers += com.trueaccord.scalapb.LiteParser.readMessage(__input, netmsg.game.InitPlayer.defaultInstance)
          case 74 =>
            __warpableObjectStats = com.trueaccord.scalapb.LiteParser.readMessage(__input, __warpableObjectStats)
          case 90 =>
            __objectives = com.trueaccord.scalapb.LiteParser.readMessage(__input, __objectives)
          case 98 =>
            __turnStarted = com.trueaccord.scalapb.LiteParser.readMessage(__input, __turnStarted)
          case 106 =>
            __extractionSpeedRates += com.trueaccord.scalapb.LiteParser.readMessage(__input, netmsg.game.MInit.ExtractionSpeedRate.defaultInstance)
          case 114 =>
            __id = com.trueaccord.scalapb.LiteParser.readMessage(__input, __id)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.MInit(
          bounds = __bounds,
          objects = __objects.result(),
          warpZone = __warpZone.result(),
          visiblePoints = __visiblePoints.result(),
          selfTeam = __selfTeam,
          otherTeams = __otherTeams.result(),
          self = __self,
          otherPlayers = __otherPlayers.result(),
          warpableObjectStats = __warpableObjectStats,
          objectives = __objectives,
          turnStarted = __turnStarted,
          extractionSpeedRates = __extractionSpeedRates.result(),
          id = __id
      )
    }
    def withBounds(__v: netmsg.base.Bounds): MInit = copy(bounds = __v)
    def clearObjects = copy(objects = Nil)
    def addObjects(__vs: netmsg.game.WObject*): MInit = addAllObjects(__vs)
    def addAllObjects(__vs: TraversableOnce[netmsg.game.WObject]): MInit = copy(objects = objects ++ __vs)
    def withObjects(__v: Seq[netmsg.game.WObject]): MInit = copy(objects = __v)
    def clearWarpZone = copy(warpZone = Nil)
    def addWarpZone(__vs: netmsg.base.Vect2*): MInit = addAllWarpZone(__vs)
    def addAllWarpZone(__vs: TraversableOnce[netmsg.base.Vect2]): MInit = copy(warpZone = warpZone ++ __vs)
    def withWarpZone(__v: Seq[netmsg.base.Vect2]): MInit = copy(warpZone = __v)
    def clearVisiblePoints = copy(visiblePoints = Nil)
    def addVisiblePoints(__vs: netmsg.base.Vect2*): MInit = addAllVisiblePoints(__vs)
    def addAllVisiblePoints(__vs: TraversableOnce[netmsg.base.Vect2]): MInit = copy(visiblePoints = visiblePoints ++ __vs)
    def withVisiblePoints(__v: Seq[netmsg.base.Vect2]): MInit = copy(visiblePoints = __v)
    def withSelfTeam(__v: netmsg.game.Team): MInit = copy(selfTeam = __v)
    def clearOtherTeams = copy(otherTeams = Nil)
    def addOtherTeams(__vs: netmsg.game.Team*): MInit = addAllOtherTeams(__vs)
    def addAllOtherTeams(__vs: TraversableOnce[netmsg.game.Team]): MInit = copy(otherTeams = otherTeams ++ __vs)
    def withOtherTeams(__v: Seq[netmsg.game.Team]): MInit = copy(otherTeams = __v)
    def withSelf(__v: netmsg.game.PlayerState): MInit = copy(self = __v)
    def clearOtherPlayers = copy(otherPlayers = Nil)
    def addOtherPlayers(__vs: netmsg.game.InitPlayer*): MInit = addAllOtherPlayers(__vs)
    def addAllOtherPlayers(__vs: TraversableOnce[netmsg.game.InitPlayer]): MInit = copy(otherPlayers = otherPlayers ++ __vs)
    def withOtherPlayers(__v: Seq[netmsg.game.InitPlayer]): MInit = copy(otherPlayers = __v)
    def withWarpableObjectStats(__v: netmsg.game.WarpableObjectStats): MInit = copy(warpableObjectStats = __v)
    def withObjectives(__v: netmsg.game.Objectives): MInit = copy(objectives = __v)
    def withTurnStarted(__v: netmsg.game.TurnStartedEvt): MInit = copy(turnStarted = __v)
    def clearExtractionSpeedRates = copy(extractionSpeedRates = Nil)
    def addExtractionSpeedRates(__vs: netmsg.game.MInit.ExtractionSpeedRate*): MInit = addAllExtractionSpeedRates(__vs)
    def addAllExtractionSpeedRates(__vs: TraversableOnce[netmsg.game.MInit.ExtractionSpeedRate]): MInit = copy(extractionSpeedRates = extractionSpeedRates ++ __vs)
    def withExtractionSpeedRates(__v: Seq[netmsg.game.MInit.ExtractionSpeedRate]): MInit = copy(extractionSpeedRates = __v)
    def withId(__v: netmsg.game.WorldID): MInit = copy(id = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => bounds
        case 2 => objects
        case 3 => warpZone
        case 4 => visiblePoints
        case 5 => selfTeam
        case 6 => otherTeams
        case 7 => self
        case 8 => otherPlayers
        case 9 => warpableObjectStats
        case 11 => objectives
        case 12 => turnStarted
        case 13 => extractionSpeedRates
        case 14 => id
      }
    }
    def companion = netmsg.game.MInit
}

object MInit extends com.trueaccord.scalapb.GeneratedMessageCompanion[MInit]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[MInit]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.MInit = netmsg.game.MInit(
    bounds = fieldsMap(1).asInstanceOf[netmsg.base.Bounds],
    objects = fieldsMap.getOrElse(2, Nil).asInstanceOf[Seq[netmsg.game.WObject]],
    warpZone = fieldsMap.getOrElse(3, Nil).asInstanceOf[Seq[netmsg.base.Vect2]],
    visiblePoints = fieldsMap.getOrElse(4, Nil).asInstanceOf[Seq[netmsg.base.Vect2]],
    selfTeam = fieldsMap(5).asInstanceOf[netmsg.game.Team],
    otherTeams = fieldsMap.getOrElse(6, Nil).asInstanceOf[Seq[netmsg.game.Team]],
    self = fieldsMap(7).asInstanceOf[netmsg.game.PlayerState],
    otherPlayers = fieldsMap.getOrElse(8, Nil).asInstanceOf[Seq[netmsg.game.InitPlayer]],
    warpableObjectStats = fieldsMap(9).asInstanceOf[netmsg.game.WarpableObjectStats],
    objectives = fieldsMap(11).asInstanceOf[netmsg.game.Objectives],
    turnStarted = fieldsMap(12).asInstanceOf[netmsg.game.TurnStartedEvt],
    extractionSpeedRates = fieldsMap.getOrElse(13, Nil).asInstanceOf[Seq[netmsg.game.MInit.ExtractionSpeedRate]],
    id = fieldsMap(14).asInstanceOf[netmsg.game.WorldID]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("MInit", this,
    None, m = Seq(netmsg.game.MInit.ExtractionSpeedRate.descriptor),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.MInit"))
  lazy val defaultInstance = netmsg.game.MInit(
    bounds = netmsg.base.Bounds.defaultInstance,
    selfTeam = netmsg.game.Team.defaultInstance,
    self = netmsg.game.PlayerState.defaultInstance,
    warpableObjectStats = netmsg.game.WarpableObjectStats.defaultInstance,
    objectives = netmsg.game.Objectives.defaultInstance,
    turnStarted = netmsg.game.TurnStartedEvt.defaultInstance,
    id = netmsg.game.WorldID.defaultInstance
  )
  final case class ExtractionSpeedRate(
      extractionSpeed: netmsg.game.WObject.Asteroid.ExtractionSpeed,
      resourcesPerTurn: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ExtractionSpeedRate] with com.trueaccord.lenses.Updatable[ExtractionSpeedRate] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, extractionSpeed.id)
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, resourcesPerTurn)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeEnum(1, extractionSpeed.id)
        output.writeUInt32(2, resourcesPerTurn)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.MInit.ExtractionSpeedRate = {
        var __extractionSpeed = this.extractionSpeed
        var __resourcesPerTurn = this.resourcesPerTurn
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __extractionSpeed = netmsg.game.WObject.Asteroid.ExtractionSpeed.fromValue(__input.readEnum())
            case 16 =>
              __resourcesPerTurn = __input.readUInt32()
            case tag => __input.skipField(tag)
          }
        }
        netmsg.game.MInit.ExtractionSpeedRate(
            extractionSpeed = __extractionSpeed,
            resourcesPerTurn = __resourcesPerTurn
        )
      }
      def withExtractionSpeed(__v: netmsg.game.WObject.Asteroid.ExtractionSpeed): ExtractionSpeedRate = copy(extractionSpeed = __v)
      def withResourcesPerTurn(__v: Int): ExtractionSpeedRate = copy(resourcesPerTurn = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => extractionSpeed
          case 2 => resourcesPerTurn
        }
      }
      def companion = netmsg.game.MInit.ExtractionSpeedRate
  }
  
  object ExtractionSpeedRate extends com.trueaccord.scalapb.GeneratedMessageCompanion[ExtractionSpeedRate]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ExtractionSpeedRate]  = this
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.MInit.ExtractionSpeedRate = netmsg.game.MInit.ExtractionSpeedRate(
      extractionSpeed = fieldsMap(1).asInstanceOf[netmsg.game.WObject.Asteroid.ExtractionSpeed],
      resourcesPerTurn = fieldsMap(2).asInstanceOf[Int]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("ExtractionSpeedRate", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.MInit.ExtractionSpeedRate"))
    lazy val defaultInstance = netmsg.game.MInit.ExtractionSpeedRate(
      extractionSpeed = netmsg.game.WObject.Asteroid.ExtractionSpeed.SLOW,
      resourcesPerTurn = 0
    )
    implicit class ExtractionSpeedRateLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ExtractionSpeedRate]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ExtractionSpeedRate](_l) {
      def extractionSpeed: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WObject.Asteroid.ExtractionSpeed] = field(_.extractionSpeed)((c_, f_) => c_.copy(extractionSpeed = f_))
      def resourcesPerTurn: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.resourcesPerTurn)((c_, f_) => c_.copy(resourcesPerTurn = f_))
    }
    final val EXTRACTION_SPEED_FIELD_NUMBER = 1
    final val RESOURCES_PER_TURN_FIELD_NUMBER = 2
  }
  
  implicit class MInitLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, MInit]) extends com.trueaccord.lenses.ObjectLens[UpperPB, MInit](_l) {
    def bounds: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Bounds] = field(_.bounds)((c_, f_) => c_.copy(bounds = f_))
    def objects: com.trueaccord.lenses.Lens[UpperPB, Seq[netmsg.game.WObject]] = field(_.objects)((c_, f_) => c_.copy(objects = f_))
    def warpZone: com.trueaccord.lenses.Lens[UpperPB, Seq[netmsg.base.Vect2]] = field(_.warpZone)((c_, f_) => c_.copy(warpZone = f_))
    def visiblePoints: com.trueaccord.lenses.Lens[UpperPB, Seq[netmsg.base.Vect2]] = field(_.visiblePoints)((c_, f_) => c_.copy(visiblePoints = f_))
    def selfTeam: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.Team] = field(_.selfTeam)((c_, f_) => c_.copy(selfTeam = f_))
    def otherTeams: com.trueaccord.lenses.Lens[UpperPB, Seq[netmsg.game.Team]] = field(_.otherTeams)((c_, f_) => c_.copy(otherTeams = f_))
    def self: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.PlayerState] = field(_.self)((c_, f_) => c_.copy(self = f_))
    def otherPlayers: com.trueaccord.lenses.Lens[UpperPB, Seq[netmsg.game.InitPlayer]] = field(_.otherPlayers)((c_, f_) => c_.copy(otherPlayers = f_))
    def warpableObjectStats: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WarpableObjectStats] = field(_.warpableObjectStats)((c_, f_) => c_.copy(warpableObjectStats = f_))
    def objectives: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.Objectives] = field(_.objectives)((c_, f_) => c_.copy(objectives = f_))
    def turnStarted: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.TurnStartedEvt] = field(_.turnStarted)((c_, f_) => c_.copy(turnStarted = f_))
    def extractionSpeedRates: com.trueaccord.lenses.Lens[UpperPB, Seq[netmsg.game.MInit.ExtractionSpeedRate]] = field(_.extractionSpeedRates)((c_, f_) => c_.copy(extractionSpeedRates = f_))
    def id: com.trueaccord.lenses.Lens[UpperPB, netmsg.game.WorldID] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val BOUNDS_FIELD_NUMBER = 1
  final val OBJECTS_FIELD_NUMBER = 2
  final val WARP_ZONE_FIELD_NUMBER = 3
  final val VISIBLE_POINTS_FIELD_NUMBER = 4
  final val SELF_TEAM_FIELD_NUMBER = 5
  final val OTHER_TEAMS_FIELD_NUMBER = 6
  final val SELF_FIELD_NUMBER = 7
  final val OTHER_PLAYERS_FIELD_NUMBER = 8
  final val WARPABLE_OBJECT_STATS_FIELD_NUMBER = 9
  final val OBJECTIVES_FIELD_NUMBER = 11
  final val TURN_STARTED_FIELD_NUMBER = 12
  final val EXTRACTION_SPEED_RATES_FIELD_NUMBER = 13
  final val ID_FIELD_NUMBER = 14
}
