// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.game

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class MEvents(
    events: Seq[netmsg.game.Event] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MEvents] with com.trueaccord.lenses.Updatable[MEvents] {
    lazy val serializedSize: Int = {
      var __size = 0
      events.foreach(events => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(events.serializedSize) + events.serializedSize)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      events.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.game.MEvents = {
      val __events = (scala.collection.immutable.Vector.newBuilder[netmsg.game.Event] ++= this.events)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __events += com.trueaccord.scalapb.LiteParser.readMessage(__input, netmsg.game.Event.defaultInstance)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.game.MEvents(
          events = __events.result()
      )
    }
    def clearEvents = copy(events = Nil)
    def addEvents(__vs: netmsg.game.Event*): MEvents = addAllEvents(__vs)
    def addAllEvents(__vs: TraversableOnce[netmsg.game.Event]): MEvents = copy(events = events ++ __vs)
    def withEvents(__v: Seq[netmsg.game.Event]): MEvents = copy(events = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => events
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.game.MEvents.toJavaProto(this))
    def companion = netmsg.game.MEvents
}

object MEvents extends com.trueaccord.scalapb.GeneratedMessageCompanion[MEvents] with com.trueaccord.scalapb.JavaProtoSupport[MEvents, netmsg.Game.MEvents]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[MEvents] with com.trueaccord.scalapb.JavaProtoSupport[MEvents, netmsg.Game.MEvents]  = this
  def toJavaProto(scalaPbSource: netmsg.game.MEvents): netmsg.Game.MEvents = {
    val javaPbOut = netmsg.Game.MEvents.newBuilder
    javaPbOut.addAllEvents(scalaPbSource.events.map(netmsg.game.Event.toJavaProto))
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Game.MEvents): netmsg.game.MEvents = netmsg.game.MEvents(
    events = javaPbSource.getEventsList.map(netmsg.game.Event.fromJavaProto)
  )
  override def fromAscii(ascii: String): netmsg.game.MEvents = {
    val javaProtoBuilder = netmsg.Game.MEvents.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.game.MEvents = netmsg.game.MEvents(
    events = fieldsMap.getOrElse(1, Nil).asInstanceOf[Seq[netmsg.game.Event]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("MEvents", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.game.InternalFields_game.internalFieldsFor("netmsg.game.MEvents"))
  lazy val defaultInstance = netmsg.game.MEvents(
  )
  implicit class MEventsLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, MEvents]) extends com.trueaccord.lenses.ObjectLens[UpperPB, MEvents](_l) {
    def events: com.trueaccord.lenses.Lens[UpperPB, Seq[netmsg.game.Event]] = field(_.events)((c_, f_) => c_.copy(events = f_))
  }
  final val EVENTS_FIELD_NUMBER = 1
}
