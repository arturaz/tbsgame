// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.bg_client


import com.trueaccord.scalapb.Descriptors

final case class Login(
    token: String
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Login] with com.trueaccord.lenses.Updatable[Login] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, token)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeString(1, token)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.bg_client.Login = {
      var __token = this.token
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __token = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.bg_client.Login(
          token = __token
      )
    }
    def withToken(__v: String): Login = copy(token = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => token
      }
    }
    def companion = netmsg.bg_client.Login
}

object Login extends com.trueaccord.scalapb.GeneratedMessageCompanion[Login]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Login]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.bg_client.Login = netmsg.bg_client.Login(
    token = fieldsMap(1).asInstanceOf[String]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Login", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.bg_client.InternalFields_bg_client.internalFieldsFor("netmsg.bg_client.Login"))
  lazy val defaultInstance = netmsg.bg_client.Login(
    token = ""
  )
  implicit class LoginLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Login]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Login](_l) {
    def token: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.token)((c_, f_) => c_.copy(token = f_))
  }
  final val TOKEN_FIELD_NUMBER = 1
}
