// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.bg_client


import com.trueaccord.scalapb.Descriptors

final case class Server2Client(
    login: Option[netmsg.bg_client.LoginReply] = None,
    waitingListChanged: Option[netmsg.bg_client.WaitingListChanged] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Server2Client] with com.trueaccord.lenses.Updatable[Server2Client] {
    lazy val serializedSize: Int = {
      var __size = 0
      if (login.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(login.get.serializedSize) + login.get.serializedSize }
      if (waitingListChanged.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(waitingListChanged.get.serializedSize) + waitingListChanged.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      login.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      waitingListChanged.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.bg_client.Server2Client = {
      var __login = this.login
      var __waitingListChanged = this.waitingListChanged
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __login = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __login.getOrElse(netmsg.bg_client.LoginReply.defaultInstance)))
          case 18 =>
            __waitingListChanged = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __waitingListChanged.getOrElse(netmsg.bg_client.WaitingListChanged.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      netmsg.bg_client.Server2Client(
          login = __login,
          waitingListChanged = __waitingListChanged
      )
    }
    def getLogin: netmsg.bg_client.LoginReply = login.getOrElse(netmsg.bg_client.LoginReply.defaultInstance)
    def clearLogin: Server2Client = copy(login = None)
    def withLogin(__v: netmsg.bg_client.LoginReply): Server2Client = copy(login = Some(__v))
    def getWaitingListChanged: netmsg.bg_client.WaitingListChanged = waitingListChanged.getOrElse(netmsg.bg_client.WaitingListChanged.defaultInstance)
    def clearWaitingListChanged: Server2Client = copy(waitingListChanged = None)
    def withWaitingListChanged(__v: netmsg.bg_client.WaitingListChanged): Server2Client = copy(waitingListChanged = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => login
        case 2 => waitingListChanged
      }
    }
    def companion = netmsg.bg_client.Server2Client
}

object Server2Client extends com.trueaccord.scalapb.GeneratedMessageCompanion[Server2Client]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Server2Client]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.bg_client.Server2Client = netmsg.bg_client.Server2Client(
    login = fieldsMap.getOrElse(1, None).asInstanceOf[Option[netmsg.bg_client.LoginReply]],
    waitingListChanged = fieldsMap.getOrElse(2, None).asInstanceOf[Option[netmsg.bg_client.WaitingListChanged]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Server2Client", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.bg_client.InternalFields_bg_client.internalFieldsFor("netmsg.bg_client.Server2Client"))
  lazy val defaultInstance = netmsg.bg_client.Server2Client(
  )
  implicit class Server2ClientLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Server2Client]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Server2Client](_l) {
    def login: com.trueaccord.lenses.Lens[UpperPB, netmsg.bg_client.LoginReply] = field(_.getLogin)((c_, f_) => c_.copy(login = Some(f_)))
    def optionalLogin: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.bg_client.LoginReply]] = field(_.login)((c_, f_) => c_.copy(login = f_))
    def waitingListChanged: com.trueaccord.lenses.Lens[UpperPB, netmsg.bg_client.WaitingListChanged] = field(_.getWaitingListChanged)((c_, f_) => c_.copy(waitingListChanged = Some(f_)))
    def optionalWaitingListChanged: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.bg_client.WaitingListChanged]] = field(_.waitingListChanged)((c_, f_) => c_.copy(waitingListChanged = f_))
  }
  final val LOGIN_FIELD_NUMBER = 1
  final val WAITING_LIST_CHANGED_FIELD_NUMBER = 2
}
