// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.management

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class Credentials(
    name: String,
    password: Option[String] = None,
    sessionToken: Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Credentials] with com.trueaccord.lenses.Updatable[Credentials] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
      if (password.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, password.get) }
      if (sessionToken.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, sessionToken.get) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeString(1, name)
      password.foreach { v => 
        output.writeString(2, v)
      }
      sessionToken.foreach { v => 
        output.writeString(3, v)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.management.Credentials = {
      var __name = this.name
      var __password = this.password
      var __sessionToken = this.sessionToken
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = __input.readString()
          case 18 =>
            __password = Some(__input.readString())
          case 26 =>
            __sessionToken = Some(__input.readString())
          case tag => __input.skipField(tag)
        }
      }
      netmsg.management.Credentials(
          name = __name,
          password = __password,
          sessionToken = __sessionToken
      )
    }
    def withName(__v: String): Credentials = copy(name = __v)
    def getPassword: String = password.getOrElse("")
    def clearPassword: Credentials = copy(password = None)
    def withPassword(__v: String): Credentials = copy(password = Some(__v))
    def getSessionToken: String = sessionToken.getOrElse("")
    def clearSessionToken: Credentials = copy(sessionToken = None)
    def withSessionToken(__v: String): Credentials = copy(sessionToken = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => name
        case 2 => password
        case 3 => sessionToken
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.management.Credentials.toJavaProto(this))
    def companion = netmsg.management.Credentials
}

object Credentials extends com.trueaccord.scalapb.GeneratedMessageCompanion[Credentials] with com.trueaccord.scalapb.JavaProtoSupport[Credentials, netmsg.Management.Credentials]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Credentials] with com.trueaccord.scalapb.JavaProtoSupport[Credentials, netmsg.Management.Credentials]  = this
  def toJavaProto(scalaPbSource: netmsg.management.Credentials): netmsg.Management.Credentials = {
    val javaPbOut = netmsg.Management.Credentials.newBuilder
    javaPbOut.setName(scalaPbSource.name)
    scalaPbSource.password.foreach(javaPbOut.setPassword)
    scalaPbSource.sessionToken.foreach(javaPbOut.setSessionToken)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Management.Credentials): netmsg.management.Credentials = netmsg.management.Credentials(
    name = javaPbSource.getName,
    password = if (javaPbSource.hasPassword) Some(javaPbSource.getPassword) else None,
    sessionToken = if (javaPbSource.hasSessionToken) Some(javaPbSource.getSessionToken) else None
  )
  override def fromAscii(ascii: String): netmsg.management.Credentials = {
    val javaProtoBuilder = netmsg.Management.Credentials.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.management.Credentials = netmsg.management.Credentials(
    name = fieldsMap(1).asInstanceOf[String],
    password = fieldsMap.getOrElse(2, None).asInstanceOf[Option[String]],
    sessionToken = fieldsMap.getOrElse(3, None).asInstanceOf[Option[String]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Credentials", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.management.InternalFields_management.internalFieldsFor("netmsg.management.Credentials"))
  lazy val defaultInstance = netmsg.management.Credentials(
    name = ""
  )
  implicit class CredentialsLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Credentials]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Credentials](_l) {
    def name: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def password: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPassword)((c_, f_) => c_.copy(password = Some(f_)))
    def optionalPassword: com.trueaccord.lenses.Lens[UpperPB, Option[String]] = field(_.password)((c_, f_) => c_.copy(password = f_))
    def sessionToken: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSessionToken)((c_, f_) => c_.copy(sessionToken = Some(f_)))
    def optionalSessionToken: com.trueaccord.lenses.Lens[UpperPB, Option[String]] = field(_.sessionToken)((c_, f_) => c_.copy(sessionToken = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val PASSWORD_FIELD_NUMBER = 2
  final val SESSION_TOKEN_FIELD_NUMBER = 3
}
