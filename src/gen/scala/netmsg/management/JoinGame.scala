// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.management

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class JoinGame(
    mode: netmsg.management.JoinGame.Mode
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[JoinGame] with com.trueaccord.lenses.Updatable[JoinGame] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(mode.serializedSize) + mode.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(mode.serializedSize)
      mode.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.management.JoinGame = {
      var __mode = this.mode
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __mode = com.trueaccord.scalapb.LiteParser.readMessage(__input, __mode)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.management.JoinGame(
          mode = __mode
      )
    }
    def withMode(__v: netmsg.management.JoinGame.Mode): JoinGame = copy(mode = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => mode
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.management.JoinGame.toJavaProto(this))
    def companion = netmsg.management.JoinGame
}

object JoinGame extends com.trueaccord.scalapb.GeneratedMessageCompanion[JoinGame] with com.trueaccord.scalapb.JavaProtoSupport[JoinGame, netmsg.Management.JoinGame]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[JoinGame] with com.trueaccord.scalapb.JavaProtoSupport[JoinGame, netmsg.Management.JoinGame]  = this
  def toJavaProto(scalaPbSource: netmsg.management.JoinGame): netmsg.Management.JoinGame = {
    val javaPbOut = netmsg.Management.JoinGame.newBuilder
    javaPbOut.setMode(netmsg.management.JoinGame.Mode.toJavaProto(scalaPbSource.mode))
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Management.JoinGame): netmsg.management.JoinGame = netmsg.management.JoinGame(
    mode = netmsg.management.JoinGame.Mode.fromJavaProto(javaPbSource.getMode)
  )
  override def fromAscii(ascii: String): netmsg.management.JoinGame = {
    val javaProtoBuilder = netmsg.Management.JoinGame.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.management.JoinGame = netmsg.management.JoinGame(
    mode = fieldsMap(1).asInstanceOf[netmsg.management.JoinGame.Mode]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("JoinGame", this,
    None, m = Seq(netmsg.management.JoinGame.Mode.descriptor),
    e = Seq(),
    f = netmsg.management.InternalFields_management.internalFieldsFor("netmsg.management.JoinGame"))
  lazy val defaultInstance = netmsg.management.JoinGame(
    mode = netmsg.management.JoinGame.Mode.defaultInstance
  )
  final case class Mode(
      teams: Int,
      playersPerTeam: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Mode] with com.trueaccord.lenses.Updatable[Mode] {
      lazy val serializedSize: Int = {
        var __size = 0
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, teams)
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, playersPerTeam)
        __size
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeUInt32(1, teams)
        output.writeUInt32(2, playersPerTeam)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.management.JoinGame.Mode = {
        var __teams = this.teams
        var __playersPerTeam = this.playersPerTeam
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __teams = __input.readUInt32()
            case 16 =>
              __playersPerTeam = __input.readUInt32()
            case tag => __input.skipField(tag)
          }
        }
        netmsg.management.JoinGame.Mode(
            teams = __teams,
            playersPerTeam = __playersPerTeam
        )
      }
      def withTeams(__v: Int): Mode = copy(teams = __v)
      def withPlayersPerTeam(__v: Int): Mode = copy(playersPerTeam = __v)
      def getField(__field: Descriptors.FieldDescriptor): Any = {
        __field.number match {
          case 1 => teams
          case 2 => playersPerTeam
        }
      }
      override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.management.JoinGame.Mode.toJavaProto(this))
      def companion = netmsg.management.JoinGame.Mode
  }
  
  object Mode extends com.trueaccord.scalapb.GeneratedMessageCompanion[Mode] with com.trueaccord.scalapb.JavaProtoSupport[Mode, netmsg.Management.JoinGame.Mode]  {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Mode] with com.trueaccord.scalapb.JavaProtoSupport[Mode, netmsg.Management.JoinGame.Mode]  = this
    def toJavaProto(scalaPbSource: netmsg.management.JoinGame.Mode): netmsg.Management.JoinGame.Mode = {
      val javaPbOut = netmsg.Management.JoinGame.Mode.newBuilder
      javaPbOut.setTeams(scalaPbSource.teams)
      javaPbOut.setPlayersPerTeam(scalaPbSource.playersPerTeam)
      javaPbOut.build
    }
    def fromJavaProto(javaPbSource: netmsg.Management.JoinGame.Mode): netmsg.management.JoinGame.Mode = netmsg.management.JoinGame.Mode(
      teams = javaPbSource.getTeams.intValue,
      playersPerTeam = javaPbSource.getPlayersPerTeam.intValue
    )
    override def fromAscii(ascii: String): netmsg.management.JoinGame.Mode = {
      val javaProtoBuilder = netmsg.Management.JoinGame.Mode.newBuilder
      com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
      fromJavaProto(javaProtoBuilder.build)
    }
    def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.management.JoinGame.Mode = netmsg.management.JoinGame.Mode(
      teams = fieldsMap(1).asInstanceOf[Int],
      playersPerTeam = fieldsMap(2).asInstanceOf[Int]
    )
    lazy val descriptor = new Descriptors.MessageDescriptor("Mode", this,
      None, m = Seq(),
      e = Seq(),
      f = netmsg.management.InternalFields_management.internalFieldsFor("netmsg.management.JoinGame.Mode"))
    lazy val defaultInstance = netmsg.management.JoinGame.Mode(
      teams = 0,
      playersPerTeam = 0
    )
    implicit class ModeLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Mode]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Mode](_l) {
      def teams: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.teams)((c_, f_) => c_.copy(teams = f_))
      def playersPerTeam: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.playersPerTeam)((c_, f_) => c_.copy(playersPerTeam = f_))
    }
    final val TEAMS_FIELD_NUMBER = 1
    final val PLAYERS_PER_TEAM_FIELD_NUMBER = 2
  }
  
  implicit class JoinGameLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, JoinGame]) extends com.trueaccord.lenses.ObjectLens[UpperPB, JoinGame](_l) {
    def mode: com.trueaccord.lenses.Lens[UpperPB, netmsg.management.JoinGame.Mode] = field(_.mode)((c_, f_) => c_.copy(mode = f_))
  }
  final val MODE_FIELD_NUMBER = 1
}
