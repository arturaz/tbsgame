// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.management

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class RegisterResponse(
    newSessionToken: Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[RegisterResponse] with com.trueaccord.lenses.Updatable[RegisterResponse] {
    lazy val serializedSize: Int = {
      var __size = 0
      if (newSessionToken.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, newSessionToken.get) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      newSessionToken.foreach { v => 
        output.writeString(1, v)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.management.RegisterResponse = {
      var __newSessionToken = this.newSessionToken
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __newSessionToken = Some(__input.readString())
          case tag => __input.skipField(tag)
        }
      }
      netmsg.management.RegisterResponse(
          newSessionToken = __newSessionToken
      )
    }
    def getNewSessionToken: String = newSessionToken.getOrElse("")
    def clearNewSessionToken: RegisterResponse = copy(newSessionToken = None)
    def withNewSessionToken(__v: String): RegisterResponse = copy(newSessionToken = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => newSessionToken
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.management.RegisterResponse.toJavaProto(this))
    def companion = netmsg.management.RegisterResponse
}

object RegisterResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[RegisterResponse] with com.trueaccord.scalapb.JavaProtoSupport[RegisterResponse, netmsg.Management.RegisterResponse]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[RegisterResponse] with com.trueaccord.scalapb.JavaProtoSupport[RegisterResponse, netmsg.Management.RegisterResponse]  = this
  def toJavaProto(scalaPbSource: netmsg.management.RegisterResponse): netmsg.Management.RegisterResponse = {
    val javaPbOut = netmsg.Management.RegisterResponse.newBuilder
    scalaPbSource.newSessionToken.foreach(javaPbOut.setNewSessionToken)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Management.RegisterResponse): netmsg.management.RegisterResponse = netmsg.management.RegisterResponse(
    newSessionToken = if (javaPbSource.hasNewSessionToken) Some(javaPbSource.getNewSessionToken) else None
  )
  override def fromAscii(ascii: String): netmsg.management.RegisterResponse = {
    val javaProtoBuilder = netmsg.Management.RegisterResponse.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.management.RegisterResponse = netmsg.management.RegisterResponse(
    newSessionToken = fieldsMap.getOrElse(1, None).asInstanceOf[Option[String]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("RegisterResponse", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.management.InternalFields_management.internalFieldsFor("netmsg.management.RegisterResponse"))
  lazy val defaultInstance = netmsg.management.RegisterResponse(
  )
  implicit class RegisterResponseLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, RegisterResponse]) extends com.trueaccord.lenses.ObjectLens[UpperPB, RegisterResponse](_l) {
    def newSessionToken: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getNewSessionToken)((c_, f_) => c_.copy(newSessionToken = Some(f_)))
    def optionalNewSessionToken: com.trueaccord.lenses.Lens[UpperPB, Option[String]] = field(_.newSessionToken)((c_, f_) => c_.copy(newSessionToken = f_))
  }
  final val NEW_SESSION_TOKEN_FIELD_NUMBER = 1
}
