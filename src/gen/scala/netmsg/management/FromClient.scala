// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.management


import com.trueaccord.scalapb.Descriptors

final case class FromClient(
    autoRegister: Option[netmsg.management.AutoRegister] = None,
    checkNameAvailability: Option[netmsg.management.CheckNameAvailability] = None,
    register: Option[netmsg.management.Register] = None,
    login: Option[netmsg.management.Login] = None,
    joinGame: Option[netmsg.management.JoinGame] = None,
    cancelJoinGame: Option[netmsg.management.CancelJoinGame] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FromClient] with com.trueaccord.lenses.Updatable[FromClient] {
    lazy val serializedSize: Int = {
      var __size = 0
      if (autoRegister.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(autoRegister.get.serializedSize) + autoRegister.get.serializedSize }
      if (checkNameAvailability.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(checkNameAvailability.get.serializedSize) + checkNameAvailability.get.serializedSize }
      if (register.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(register.get.serializedSize) + register.get.serializedSize }
      if (login.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(login.get.serializedSize) + login.get.serializedSize }
      if (joinGame.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(joinGame.get.serializedSize) + joinGame.get.serializedSize }
      if (cancelJoinGame.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(cancelJoinGame.get.serializedSize) + cancelJoinGame.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      autoRegister.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      checkNameAvailability.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      register.foreach { v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      login.foreach { v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      joinGame.foreach { v => 
        output.writeTag(5, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      cancelJoinGame.foreach { v => 
        output.writeTag(6, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.management.FromClient = {
      var __autoRegister = this.autoRegister
      var __checkNameAvailability = this.checkNameAvailability
      var __register = this.register
      var __login = this.login
      var __joinGame = this.joinGame
      var __cancelJoinGame = this.cancelJoinGame
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __autoRegister = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __autoRegister.getOrElse(netmsg.management.AutoRegister.defaultInstance)))
          case 18 =>
            __checkNameAvailability = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __checkNameAvailability.getOrElse(netmsg.management.CheckNameAvailability.defaultInstance)))
          case 26 =>
            __register = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __register.getOrElse(netmsg.management.Register.defaultInstance)))
          case 34 =>
            __login = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __login.getOrElse(netmsg.management.Login.defaultInstance)))
          case 42 =>
            __joinGame = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __joinGame.getOrElse(netmsg.management.JoinGame.defaultInstance)))
          case 50 =>
            __cancelJoinGame = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __cancelJoinGame.getOrElse(netmsg.management.CancelJoinGame.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      netmsg.management.FromClient(
          autoRegister = __autoRegister,
          checkNameAvailability = __checkNameAvailability,
          register = __register,
          login = __login,
          joinGame = __joinGame,
          cancelJoinGame = __cancelJoinGame
      )
    }
    def getAutoRegister: netmsg.management.AutoRegister = autoRegister.getOrElse(netmsg.management.AutoRegister.defaultInstance)
    def clearAutoRegister: FromClient = copy(autoRegister = None)
    def withAutoRegister(__v: netmsg.management.AutoRegister): FromClient = copy(autoRegister = Some(__v))
    def getCheckNameAvailability: netmsg.management.CheckNameAvailability = checkNameAvailability.getOrElse(netmsg.management.CheckNameAvailability.defaultInstance)
    def clearCheckNameAvailability: FromClient = copy(checkNameAvailability = None)
    def withCheckNameAvailability(__v: netmsg.management.CheckNameAvailability): FromClient = copy(checkNameAvailability = Some(__v))
    def getRegister: netmsg.management.Register = register.getOrElse(netmsg.management.Register.defaultInstance)
    def clearRegister: FromClient = copy(register = None)
    def withRegister(__v: netmsg.management.Register): FromClient = copy(register = Some(__v))
    def getLogin: netmsg.management.Login = login.getOrElse(netmsg.management.Login.defaultInstance)
    def clearLogin: FromClient = copy(login = None)
    def withLogin(__v: netmsg.management.Login): FromClient = copy(login = Some(__v))
    def getJoinGame: netmsg.management.JoinGame = joinGame.getOrElse(netmsg.management.JoinGame.defaultInstance)
    def clearJoinGame: FromClient = copy(joinGame = None)
    def withJoinGame(__v: netmsg.management.JoinGame): FromClient = copy(joinGame = Some(__v))
    def getCancelJoinGame: netmsg.management.CancelJoinGame = cancelJoinGame.getOrElse(netmsg.management.CancelJoinGame.defaultInstance)
    def clearCancelJoinGame: FromClient = copy(cancelJoinGame = None)
    def withCancelJoinGame(__v: netmsg.management.CancelJoinGame): FromClient = copy(cancelJoinGame = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => autoRegister
        case 2 => checkNameAvailability
        case 3 => register
        case 4 => login
        case 5 => joinGame
        case 6 => cancelJoinGame
      }
    }
    def companion = netmsg.management.FromClient
}

object FromClient extends com.trueaccord.scalapb.GeneratedMessageCompanion[FromClient]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[FromClient]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.management.FromClient = netmsg.management.FromClient(
    autoRegister = fieldsMap.getOrElse(1, None).asInstanceOf[Option[netmsg.management.AutoRegister]],
    checkNameAvailability = fieldsMap.getOrElse(2, None).asInstanceOf[Option[netmsg.management.CheckNameAvailability]],
    register = fieldsMap.getOrElse(3, None).asInstanceOf[Option[netmsg.management.Register]],
    login = fieldsMap.getOrElse(4, None).asInstanceOf[Option[netmsg.management.Login]],
    joinGame = fieldsMap.getOrElse(5, None).asInstanceOf[Option[netmsg.management.JoinGame]],
    cancelJoinGame = fieldsMap.getOrElse(6, None).asInstanceOf[Option[netmsg.management.CancelJoinGame]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("FromClient", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.management.InternalFields_management.internalFieldsFor("netmsg.management.FromClient"))
  lazy val defaultInstance = netmsg.management.FromClient(
  )
  implicit class FromClientLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, FromClient]) extends com.trueaccord.lenses.ObjectLens[UpperPB, FromClient](_l) {
    def autoRegister: com.trueaccord.lenses.Lens[UpperPB, netmsg.management.AutoRegister] = field(_.getAutoRegister)((c_, f_) => c_.copy(autoRegister = Some(f_)))
    def optionalAutoRegister: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.management.AutoRegister]] = field(_.autoRegister)((c_, f_) => c_.copy(autoRegister = f_))
    def checkNameAvailability: com.trueaccord.lenses.Lens[UpperPB, netmsg.management.CheckNameAvailability] = field(_.getCheckNameAvailability)((c_, f_) => c_.copy(checkNameAvailability = Some(f_)))
    def optionalCheckNameAvailability: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.management.CheckNameAvailability]] = field(_.checkNameAvailability)((c_, f_) => c_.copy(checkNameAvailability = f_))
    def register: com.trueaccord.lenses.Lens[UpperPB, netmsg.management.Register] = field(_.getRegister)((c_, f_) => c_.copy(register = Some(f_)))
    def optionalRegister: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.management.Register]] = field(_.register)((c_, f_) => c_.copy(register = f_))
    def login: com.trueaccord.lenses.Lens[UpperPB, netmsg.management.Login] = field(_.getLogin)((c_, f_) => c_.copy(login = Some(f_)))
    def optionalLogin: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.management.Login]] = field(_.login)((c_, f_) => c_.copy(login = f_))
    def joinGame: com.trueaccord.lenses.Lens[UpperPB, netmsg.management.JoinGame] = field(_.getJoinGame)((c_, f_) => c_.copy(joinGame = Some(f_)))
    def optionalJoinGame: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.management.JoinGame]] = field(_.joinGame)((c_, f_) => c_.copy(joinGame = f_))
    def cancelJoinGame: com.trueaccord.lenses.Lens[UpperPB, netmsg.management.CancelJoinGame] = field(_.getCancelJoinGame)((c_, f_) => c_.copy(cancelJoinGame = Some(f_)))
    def optionalCancelJoinGame: com.trueaccord.lenses.Lens[UpperPB, Option[netmsg.management.CancelJoinGame]] = field(_.cancelJoinGame)((c_, f_) => c_.copy(cancelJoinGame = f_))
  }
  final val AUTO_REGISTER_FIELD_NUMBER = 1
  final val CHECK_NAME_AVAILABILITY_FIELD_NUMBER = 2
  final val REGISTER_FIELD_NUMBER = 3
  final val LOGIN_FIELD_NUMBER = 4
  final val JOIN_GAME_FIELD_NUMBER = 5
  final val CANCEL_JOIN_GAME_FIELD_NUMBER = 6
}
