// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.management

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class Register(
    username: String,
    password: String,
    email: String
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Register] with com.trueaccord.lenses.Updatable[Register] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, username)
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, password)
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, email)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeString(1, username)
      output.writeString(2, password)
      output.writeString(3, email)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.management.Register = {
      var __username = this.username
      var __password = this.password
      var __email = this.email
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __username = __input.readString()
          case 18 =>
            __password = __input.readString()
          case 26 =>
            __email = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.management.Register(
          username = __username,
          password = __password,
          email = __email
      )
    }
    def withUsername(__v: String): Register = copy(username = __v)
    def withPassword(__v: String): Register = copy(password = __v)
    def withEmail(__v: String): Register = copy(email = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => username
        case 2 => password
        case 3 => email
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.management.Register.toJavaProto(this))
    def companion = netmsg.management.Register
}

object Register extends com.trueaccord.scalapb.GeneratedMessageCompanion[Register] with com.trueaccord.scalapb.JavaProtoSupport[Register, netmsg.Management.Register]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Register] with com.trueaccord.scalapb.JavaProtoSupport[Register, netmsg.Management.Register]  = this
  def toJavaProto(scalaPbSource: netmsg.management.Register): netmsg.Management.Register = {
    val javaPbOut = netmsg.Management.Register.newBuilder
    javaPbOut.setUsername(scalaPbSource.username)
    javaPbOut.setPassword(scalaPbSource.password)
    javaPbOut.setEmail(scalaPbSource.email)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Management.Register): netmsg.management.Register = netmsg.management.Register(
    username = javaPbSource.getUsername,
    password = javaPbSource.getPassword,
    email = javaPbSource.getEmail
  )
  override def fromAscii(ascii: String): netmsg.management.Register = {
    val javaProtoBuilder = netmsg.Management.Register.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.management.Register = netmsg.management.Register(
    username = fieldsMap(1).asInstanceOf[String],
    password = fieldsMap(2).asInstanceOf[String],
    email = fieldsMap(3).asInstanceOf[String]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Register", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.management.InternalFields_management.internalFieldsFor("netmsg.management.Register"))
  lazy val defaultInstance = netmsg.management.Register(
    username = "",
    password = "",
    email = ""
  )
  implicit class RegisterLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Register]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Register](_l) {
    def username: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.username)((c_, f_) => c_.copy(username = f_))
    def password: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.password)((c_, f_) => c_.copy(password = f_))
    def email: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.email)((c_, f_) => c_.copy(email = f_))
  }
  final val USERNAME_FIELD_NUMBER = 1
  final val PASSWORD_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
}
