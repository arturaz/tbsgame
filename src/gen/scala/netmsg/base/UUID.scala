// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.base

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class UUID(
    mostSignificant: Long,
    leastSignificant: Long
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[UUID] with com.trueaccord.lenses.Updatable[UUID] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(1, mostSignificant)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(2, leastSignificant)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeFixed64(1, mostSignificant)
      output.writeFixed64(2, leastSignificant)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.base.UUID = {
      var __mostSignificant = this.mostSignificant
      var __leastSignificant = this.leastSignificant
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __mostSignificant = __input.readFixed64()
          case 17 =>
            __leastSignificant = __input.readFixed64()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.base.UUID(
          mostSignificant = __mostSignificant,
          leastSignificant = __leastSignificant
      )
    }
    def withMostSignificant(__v: Long): UUID = copy(mostSignificant = __v)
    def withLeastSignificant(__v: Long): UUID = copy(leastSignificant = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => mostSignificant
        case 2 => leastSignificant
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.base.UUID.toJavaProto(this))
    def companion = netmsg.base.UUID
}

object UUID extends com.trueaccord.scalapb.GeneratedMessageCompanion[UUID] with com.trueaccord.scalapb.JavaProtoSupport[UUID, netmsg.Base.UUID]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[UUID] with com.trueaccord.scalapb.JavaProtoSupport[UUID, netmsg.Base.UUID]  = this
  def toJavaProto(scalaPbSource: netmsg.base.UUID): netmsg.Base.UUID = {
    val javaPbOut = netmsg.Base.UUID.newBuilder
    javaPbOut.setMostSignificant(scalaPbSource.mostSignificant)
    javaPbOut.setLeastSignificant(scalaPbSource.leastSignificant)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Base.UUID): netmsg.base.UUID = netmsg.base.UUID(
    mostSignificant = javaPbSource.getMostSignificant.longValue,
    leastSignificant = javaPbSource.getLeastSignificant.longValue
  )
  override def fromAscii(ascii: String): netmsg.base.UUID = {
    val javaProtoBuilder = netmsg.Base.UUID.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.base.UUID = netmsg.base.UUID(
    mostSignificant = fieldsMap(1).asInstanceOf[Long],
    leastSignificant = fieldsMap(2).asInstanceOf[Long]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("UUID", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.base.InternalFields_base.internalFieldsFor("netmsg.base.UUID"))
  lazy val defaultInstance = netmsg.base.UUID(
    mostSignificant = 0L,
    leastSignificant = 0L
  )
  implicit class UUIDLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, UUID]) extends com.trueaccord.lenses.ObjectLens[UpperPB, UUID](_l) {
    def mostSignificant: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.mostSignificant)((c_, f_) => c_.copy(mostSignificant = f_))
    def leastSignificant: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.leastSignificant)((c_, f_) => c_.copy(leastSignificant = f_))
  }
  final val MOSTSIGNIFICANT_FIELD_NUMBER = 1
  final val LEASTSIGNIFICANT_FIELD_NUMBER = 2
}
