// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.base


import com.trueaccord.scalapb.Descriptors

final case class Bounds(
    start: netmsg.base.Vect2,
    end: netmsg.base.Vect2
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Bounds] with com.trueaccord.lenses.Updatable[Bounds] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(start.serializedSize) + start.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(end.serializedSize) + end.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(start.serializedSize)
      start.writeTo(output)
      output.writeTag(2, 2)
      output.writeRawVarint32(end.serializedSize)
      end.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.base.Bounds = {
      var __start = this.start
      var __end = this.end
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __start = com.trueaccord.scalapb.LiteParser.readMessage(__input, __start)
          case 18 =>
            __end = com.trueaccord.scalapb.LiteParser.readMessage(__input, __end)
          case tag => __input.skipField(tag)
        }
      }
      netmsg.base.Bounds(
          start = __start,
          end = __end
      )
    }
    def withStart(__v: netmsg.base.Vect2): Bounds = copy(start = __v)
    def withEnd(__v: netmsg.base.Vect2): Bounds = copy(end = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => start
        case 2 => end
      }
    }
    def companion = netmsg.base.Bounds
}

object Bounds extends com.trueaccord.scalapb.GeneratedMessageCompanion[Bounds]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Bounds]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.base.Bounds = netmsg.base.Bounds(
    start = fieldsMap(1).asInstanceOf[netmsg.base.Vect2],
    end = fieldsMap(2).asInstanceOf[netmsg.base.Vect2]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Bounds", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.base.InternalFields_base.internalFieldsFor("netmsg.base.Bounds"))
  lazy val defaultInstance = netmsg.base.Bounds(
    start = netmsg.base.Vect2.defaultInstance,
    end = netmsg.base.Vect2.defaultInstance
  )
  implicit class BoundsLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Bounds]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Bounds](_l) {
    def start: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Vect2] = field(_.start)((c_, f_) => c_.copy(start = f_))
    def end: com.trueaccord.lenses.Lens[UpperPB, netmsg.base.Vect2] = field(_.end)((c_, f_) => c_.copy(end = f_))
  }
  final val START_FIELD_NUMBER = 1
  final val END_FIELD_NUMBER = 2
}
