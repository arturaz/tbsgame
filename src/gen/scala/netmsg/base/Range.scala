// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.base


import com.trueaccord.scalapb.Descriptors

final case class Range(
    start: Int,
    end: Int
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Range] with com.trueaccord.lenses.Updatable[Range] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, start)
      __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, end)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeUInt32(1, start)
      output.writeUInt32(2, end)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.base.Range = {
      var __start = this.start
      var __end = this.end
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __start = __input.readUInt32()
          case 16 =>
            __end = __input.readUInt32()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.base.Range(
          start = __start,
          end = __end
      )
    }
    def withStart(__v: Int): Range = copy(start = __v)
    def withEnd(__v: Int): Range = copy(end = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => start
        case 2 => end
      }
    }
    def companion = netmsg.base.Range
}

object Range extends com.trueaccord.scalapb.GeneratedMessageCompanion[Range]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Range]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.base.Range = netmsg.base.Range(
    start = fieldsMap(1).asInstanceOf[Int],
    end = fieldsMap(2).asInstanceOf[Int]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Range", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.base.InternalFields_base.internalFieldsFor("netmsg.base.Range"))
  lazy val defaultInstance = netmsg.base.Range(
    start = 0,
    end = 0
  )
  implicit class RangeLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Range]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Range](_l) {
    def start: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.start)((c_, f_) => c_.copy(start = f_))
    def end: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.end)((c_, f_) => c_.copy(end = f_))
  }
  final val START_FIELD_NUMBER = 1
  final val END_FIELD_NUMBER = 2
}
