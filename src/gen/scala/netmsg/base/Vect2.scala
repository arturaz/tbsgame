// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.base

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class Vect2(
    x: Int,
    y: Int
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Vect2] with com.trueaccord.lenses.Updatable[Vect2] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeSInt32Size(1, x)
      __size += com.google.protobuf.CodedOutputStream.computeSInt32Size(2, y)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeSInt32(1, x)
      output.writeSInt32(2, y)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.base.Vect2 = {
      var __x = this.x
      var __y = this.y
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __x = __input.readSInt32()
          case 16 =>
            __y = __input.readSInt32()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.base.Vect2(
          x = __x,
          y = __y
      )
    }
    def withX(__v: Int): Vect2 = copy(x = __v)
    def withY(__v: Int): Vect2 = copy(y = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => x
        case 2 => y
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.base.Vect2.toJavaProto(this))
    def companion = netmsg.base.Vect2
}

object Vect2 extends com.trueaccord.scalapb.GeneratedMessageCompanion[Vect2] with com.trueaccord.scalapb.JavaProtoSupport[Vect2, netmsg.Base.Vect2]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Vect2] with com.trueaccord.scalapb.JavaProtoSupport[Vect2, netmsg.Base.Vect2]  = this
  def toJavaProto(scalaPbSource: netmsg.base.Vect2): netmsg.Base.Vect2 = {
    val javaPbOut = netmsg.Base.Vect2.newBuilder
    javaPbOut.setX(scalaPbSource.x)
    javaPbOut.setY(scalaPbSource.y)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Base.Vect2): netmsg.base.Vect2 = netmsg.base.Vect2(
    x = javaPbSource.getX.intValue,
    y = javaPbSource.getY.intValue
  )
  override def fromAscii(ascii: String): netmsg.base.Vect2 = {
    val javaProtoBuilder = netmsg.Base.Vect2.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.base.Vect2 = netmsg.base.Vect2(
    x = fieldsMap(1).asInstanceOf[Int],
    y = fieldsMap(2).asInstanceOf[Int]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Vect2", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.base.InternalFields_base.internalFieldsFor("netmsg.base.Vect2"))
  lazy val defaultInstance = netmsg.base.Vect2(
    x = 0,
    y = 0
  )
  implicit class Vect2Lens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Vect2]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Vect2](_l) {
    def x: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.x)((c_, f_) => c_.copy(x = f_))
    def y: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.y)((c_, f_) => c_.copy(y = f_))
  }
  final val X_FIELD_NUMBER = 1
  final val Y_FIELD_NUMBER = 2
}
