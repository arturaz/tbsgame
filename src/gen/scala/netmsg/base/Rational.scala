// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package netmsg.base

import scala.collection.JavaConversions._
import com.trueaccord.scalapb.Descriptors

final case class Rational(
    numerator: Long,
    denominator: Long
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Rational] with com.trueaccord.lenses.Updatable[Rational] {
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeInt64Size(1, numerator)
      __size += com.google.protobuf.CodedOutputStream.computeInt64Size(2, denominator)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeInt64(1, numerator)
      output.writeInt64(2, denominator)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): netmsg.base.Rational = {
      var __numerator = this.numerator
      var __denominator = this.denominator
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __numerator = __input.readInt64()
          case 16 =>
            __denominator = __input.readInt64()
          case tag => __input.skipField(tag)
        }
      }
      netmsg.base.Rational(
          numerator = __numerator,
          denominator = __denominator
      )
    }
    def withNumerator(__v: Long): Rational = copy(numerator = __v)
    def withDenominator(__v: Long): Rational = copy(denominator = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => numerator
        case 2 => denominator
      }
    }
    override def toString: String = com.google.protobuf.TextFormat.printToString(netmsg.base.Rational.toJavaProto(this))
    def companion = netmsg.base.Rational
}

object Rational extends com.trueaccord.scalapb.GeneratedMessageCompanion[Rational] with com.trueaccord.scalapb.JavaProtoSupport[Rational, netmsg.Base.Rational]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Rational] with com.trueaccord.scalapb.JavaProtoSupport[Rational, netmsg.Base.Rational]  = this
  def toJavaProto(scalaPbSource: netmsg.base.Rational): netmsg.Base.Rational = {
    val javaPbOut = netmsg.Base.Rational.newBuilder
    javaPbOut.setNumerator(scalaPbSource.numerator)
    javaPbOut.setDenominator(scalaPbSource.denominator)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: netmsg.Base.Rational): netmsg.base.Rational = netmsg.base.Rational(
    numerator = javaPbSource.getNumerator.longValue,
    denominator = javaPbSource.getDenominator.longValue
  )
  override def fromAscii(ascii: String): netmsg.base.Rational = {
    val javaProtoBuilder = netmsg.Base.Rational.newBuilder
    com.google.protobuf.TextFormat.merge(ascii, javaProtoBuilder)
    fromJavaProto(javaProtoBuilder.build)
  }
  def fromFieldsMap(fieldsMap: Map[Int, Any]): netmsg.base.Rational = netmsg.base.Rational(
    numerator = fieldsMap(1).asInstanceOf[Long],
    denominator = fieldsMap(2).asInstanceOf[Long]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Rational", this,
    None, m = Seq(),
    e = Seq(),
    f = netmsg.base.InternalFields_base.internalFieldsFor("netmsg.base.Rational"))
  lazy val defaultInstance = netmsg.base.Rational(
    numerator = 0L,
    denominator = 0L
  )
  implicit class RationalLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Rational]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Rational](_l) {
    def numerator: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.numerator)((c_, f_) => c_.copy(numerator = f_))
    def denominator: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.denominator)((c_, f_) => c_.copy(denominator = f_))
  }
  final val NUMERATOR_FIELD_NUMBER = 1
  final val DENOMINATOR_FIELD_NUMBER = 2
}
